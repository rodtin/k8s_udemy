apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.65/32
      cni.projectcalico.org/podIPs: 10.244.194.65/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: calico-kube-controllers-6ddfb4769-
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: 6ddfb4769
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"70819acc-8e60-425e-bb22-2071beb13026"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"calico-kube-controllers"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLED_CONTROLLERS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:45Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.65"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:41Z"
    name: calico-kube-controllers-6ddfb4769-2lbwt
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-kube-controllers-6ddfb4769
      uid: 70819acc-8e60-425e-bb22-2071beb13026
    resourceVersion: "1626910"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-kube-controllers-6ddfb4769-2lbwt
    uid: 55b2be38-319f-492c-8790-066cbf658acb
  spec:
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: ENABLED_CONTROLLERS
        value: node
      image: docker.io/calico/kube-controllers:v3.16.1
      imagePullPolicy: IfNotPresent
      name: calico-kube-controllers
      readinessProbe:
        exec:
          command:
          - /usr/bin/check-status
          - -r
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-kube-controllers-token-5wfk4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-kube-controllers
    serviceAccountName: calico-kube-controllers
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: calico-kube-controllers-token-5wfk4
      secret:
        defaultMode: 420
        secretName: calico-kube-controllers-token-5wfk4
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://234c4ed85f41ccf9ff72385e707b20aacf147a428afbf4c0e3df98be114a0707
      image: calico/kube-controllers:v3.16.1
      imageID: docker-pullable://calico/kube-controllers@sha256:591c16faf37735f6cfa24f51fbfb70ae1a1f4b01d0a6a9b852dd8a29a5e4a874
      lastState:
        terminated:
          containerID: docker://8811ebba3bfdc1c4ecb649003db35db1b62d75927ac9130a98a3d52f0037eefe
          exitCode: 2
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Error
          startedAt: "2020-11-01T23:40:59Z"
      name: calico-kube-controllers
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:31Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.65
    podIPs:
    - ip: 10.244.194.65
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/cni-config: 2f94c5fc72384ef436b5d9f2b30819fe245be55b
      hash.operator.tigera.io/node-cert: b0ca4917311ae3d76bb94af63e3d1152fd8d23de
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
    creationTimestamp: "2020-10-02T12:05:04Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 78f6d64bc5
      k8s-app: calico-node
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/cni-config: {}
            f:hash.operator.tigera.io/node-cert: {}
            f:hash.operator.tigera.io/typha-ca: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84377c2a-8082-43c9-8443-4eb55784c0f8"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_BLOCK_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_NODE_SELECTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_VXLAN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPINIPMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_TYPHAK8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAK8SSERVICENAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_VXLANMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_WIREGUARDMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP6"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/felix-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NET_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"felix-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:34:35Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.202"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:34Z"
    name: calico-node-lnfc2
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 84377c2a-8082-43c9-8443-4eb55784c0f8
    resourceVersion: "1626832"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-node-lnfc2
    uid: 05eacd43-0378-48f4-bdca-b83a2ce3d18b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker1
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: CLUSTER_TYPE
        value: k8s,operator,bgp
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FELIX_TYPHAK8SNAMESPACE
        value: calico-system
      - name: FELIX_TYPHAK8SSERVICENAME
        value: calico-typha
      - name: FELIX_TYPHACAFILE
        value: /typha-ca/caBundle
      - name: FELIX_TYPHACERTFILE
        value: /felix-certs/cert.crt
      - name: FELIX_TYPHAKEYFILE
        value: /felix-certs/key.key
      - name: FELIX_TYPHACN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: typha-certs
            optional: true
      - name: FELIX_TYPHAURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: typha-certs
            optional: true
      - name: CALICO_IPV4POOL_CIDR
        value: 10.244.0.0/16
      - name: CALICO_IPV4POOL_VXLAN
        value: CrossSubnet
      - name: CALICO_IPV4POOL_BLOCK_SIZE
        value: "26"
      - name: CALICO_IPV4POOL_NODE_SELECTOR
        value: all()
      - name: FELIX_VXLANMTU
        value: "1410"
      - name: FELIX_WIREGUARDMTU
        value: "1400"
      - name: CALICO_NETWORKING_BACKEND
        value: bird
      - name: FELIX_IPINIPMTU
        value: "1440"
      - name: IP
        value: autodetect
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      - name: IP6
        value: none
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/node:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -bird-ready
          - -felix-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /felix-certs
        name: felix-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - image: docker.io/calico/pod2daemon-flexvol:v3.16.1
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: SLEEP
        value: "false"
      - name: CNI_NET_DIR
        value: /etc/cni/net.d
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: config
            name: cni-config
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/cni:v3.16.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: felix-certs
      secret:
        defaultMode: 420
        secretName: node-certs
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: calico-node-token-7nf6x
      secret:
        defaultMode: 420
        secretName: calico-node-token-7nf6x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-02T12:05:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://534d21fbeb74b56172b2a4d99093f46662154b32f5572de48909c0a4f45dd65b
      image: calico/node:v3.16.1
      imageID: docker-pullable://calico/node@sha256:93334c1d45b8263d39b2a9b557c9bc3ca10d3199c3e7bdd757bb86a5e422ebf7
      lastState:
        terminated:
          containerID: docker://5fd46646a1fe15f5c8002c62736cb58911a2d5d15ef08ac63e2d477a8e346184
          exitCode: 255
          finishedAt: "2020-11-02T12:00:06Z"
          reason: Error
          startedAt: "2020-11-01T23:35:09Z"
      name: calico-node
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:00Z"
    hostIP: 192.168.56.202
    initContainerStatuses:
    - containerID: docker://94dc03a6eaad43971bd2749dc0324f3e8e15b19cbc591614bcce11904b827fb0
      image: calico/pod2daemon-flexvol:v3.16.1
      imageID: docker-pullable://calico/pod2daemon-flexvol@sha256:8239d918748625ce308acbb3f1b0782499b114a9a3b72fd2cf5bc0a27cc5d18a
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 2
      state:
        terminated:
          containerID: docker://94dc03a6eaad43971bd2749dc0324f3e8e15b19cbc591614bcce11904b827fb0
          exitCode: 0
          finishedAt: "2020-11-02T12:00:51Z"
          reason: Completed
          startedAt: "2020-11-02T12:00:51Z"
    - containerID: docker://3f7ba828d866c0466994471e5de4631e09bbb756a713a328be79a59f15569e5c
      image: calico/cni:v3.16.1
      imageID: docker-pullable://calico/cni@sha256:3bae6028807375b22bf3b75f9db0e5d80b678a217f85bd1ea965889cee6e70aa
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://3f7ba828d866c0466994471e5de4631e09bbb756a713a328be79a59f15569e5c
          exitCode: 0
          finishedAt: "2020-11-02T12:00:59Z"
          reason: Completed
          startedAt: "2020-11-02T12:00:54Z"
    phase: Running
    podIP: 192.168.56.202
    podIPs:
    - ip: 192.168.56.202
    qosClass: BestEffort
    startTime: "2020-10-02T12:05:05Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/cni-config: 2f94c5fc72384ef436b5d9f2b30819fe245be55b
      hash.operator.tigera.io/node-cert: b0ca4917311ae3d76bb94af63e3d1152fd8d23de
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
    creationTimestamp: "2020-10-02T12:05:46Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 78f6d64bc5
      k8s-app: calico-node
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/cni-config: {}
            f:hash.operator.tigera.io/node-cert: {}
            f:hash.operator.tigera.io/typha-ca: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84377c2a-8082-43c9-8443-4eb55784c0f8"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_BLOCK_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_NODE_SELECTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_VXLAN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPINIPMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_TYPHAK8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAK8SSERVICENAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_VXLANMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_WIREGUARDMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP6"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/felix-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NET_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"felix-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-10-08T21:24:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.203"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:29Z"
    name: calico-node-rvwvp
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 84377c2a-8082-43c9-8443-4eb55784c0f8
    resourceVersion: "1626751"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-node-rvwvp
    uid: 688e4a1b-9425-4807-b8f2-50f21c89ff14
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker2
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: CLUSTER_TYPE
        value: k8s,operator,bgp
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FELIX_TYPHAK8SNAMESPACE
        value: calico-system
      - name: FELIX_TYPHAK8SSERVICENAME
        value: calico-typha
      - name: FELIX_TYPHACAFILE
        value: /typha-ca/caBundle
      - name: FELIX_TYPHACERTFILE
        value: /felix-certs/cert.crt
      - name: FELIX_TYPHAKEYFILE
        value: /felix-certs/key.key
      - name: FELIX_TYPHACN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: typha-certs
            optional: true
      - name: FELIX_TYPHAURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: typha-certs
            optional: true
      - name: CALICO_IPV4POOL_CIDR
        value: 10.244.0.0/16
      - name: CALICO_IPV4POOL_VXLAN
        value: CrossSubnet
      - name: CALICO_IPV4POOL_BLOCK_SIZE
        value: "26"
      - name: CALICO_IPV4POOL_NODE_SELECTOR
        value: all()
      - name: FELIX_VXLANMTU
        value: "1410"
      - name: FELIX_WIREGUARDMTU
        value: "1400"
      - name: CALICO_NETWORKING_BACKEND
        value: bird
      - name: FELIX_IPINIPMTU
        value: "1440"
      - name: IP
        value: autodetect
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      - name: IP6
        value: none
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/node:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -bird-ready
          - -felix-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /felix-certs
        name: felix-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - image: docker.io/calico/pod2daemon-flexvol:v3.16.1
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: SLEEP
        value: "false"
      - name: CNI_NET_DIR
        value: /etc/cni/net.d
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: config
            name: cni-config
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/cni:v3.16.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    nodeName: k8s-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: felix-certs
      secret:
        defaultMode: 420
        secretName: node-certs
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: calico-node-token-7nf6x
      secret:
        defaultMode: 420
        secretName: calico-node-token-7nf6x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:54Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:29Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:29Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-02T12:05:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://88a1ab9310cd999730ffbb5d33b41072c51d9d881424bfc34d61d23b1ccef4b1
      image: calico/node:v3.16.1
      imageID: docker-pullable://calico/node@sha256:93334c1d45b8263d39b2a9b557c9bc3ca10d3199c3e7bdd757bb86a5e422ebf7
      lastState:
        terminated:
          containerID: docker://674ff2cb59e029623f14c3b090be09cb6f15ae694a91da52d7979fa80da75e9a
          exitCode: 0
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Completed
          startedAt: "2020-11-01T23:46:34Z"
      name: calico-node
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:54Z"
    hostIP: 192.168.56.203
    initContainerStatuses:
    - containerID: docker://ce5cfbbb1c21e38fe20c059d0e45aa225db4c0d66d88790689350bd2297772a2
      image: calico/pod2daemon-flexvol:v3.16.1
      imageID: docker-pullable://calico/pod2daemon-flexvol@sha256:8239d918748625ce308acbb3f1b0782499b114a9a3b72fd2cf5bc0a27cc5d18a
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 8
      state:
        terminated:
          containerID: docker://ce5cfbbb1c21e38fe20c059d0e45aa225db4c0d66d88790689350bd2297772a2
          exitCode: 0
          finishedAt: "2020-11-02T12:00:48Z"
          reason: Completed
          startedAt: "2020-11-02T12:00:48Z"
    - containerID: docker://4dd57b6668b24e4ebcded5058baf5eea12221c18cdf558a8f5ecd1d41a514c27
      image: calico/cni:v3.16.1
      imageID: docker-pullable://calico/cni@sha256:3bae6028807375b22bf3b75f9db0e5d80b678a217f85bd1ea965889cee6e70aa
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://4dd57b6668b24e4ebcded5058baf5eea12221c18cdf558a8f5ecd1d41a514c27
          exitCode: 0
          finishedAt: "2020-11-02T12:00:53Z"
          reason: Completed
          startedAt: "2020-11-02T12:00:50Z"
    phase: Running
    podIP: 192.168.56.203
    podIPs:
    - ip: 192.168.56.203
    qosClass: BestEffort
    startTime: "2020-10-02T12:05:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/cni-config: 2f94c5fc72384ef436b5d9f2b30819fe245be55b
      hash.operator.tigera.io/node-cert: b0ca4917311ae3d76bb94af63e3d1152fd8d23de
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
    creationTimestamp: "2020-10-24T12:38:33Z"
    generateName: calico-node-
    labels:
      controller-revision-hash: 78f6d64bc5
      k8s-app: calico-node
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/cni-config: {}
            f:hash.operator.tigera.io/node-cert: {}
            f:hash.operator.tigera.io/typha-ca: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84377c2a-8082-43c9-8443-4eb55784c0f8"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"calico-node"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_BLOCK_SIZE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_CIDR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_NODE_SELECTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_IPV4POOL_VXLAN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CALICO_NETWORKING_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CLUSTER_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DATASTORE_TYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPINIPMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPTABLESBACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_IPV6SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHACN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_TYPHAK8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAK8SSERVICENAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_TYPHAURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"FELIX_VXLANMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"FELIX_WIREGUARDMTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP_AUTODETECTION_METHOD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"IP6"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"NODENAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"WAIT_FOR_DATASTORE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/felix-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/var/lib/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/calico"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/nodeagent"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"flexvol-driver"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/driver"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"install-cni"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"CNI_CONF_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NET_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"CNI_NETWORK_CONFIG"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:configMapKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SLEEP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"felix-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"flexvol-driver-host"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"policysync"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"var-lib-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"var-run-calico"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-10-24T12:38:33Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:50Z"
    name: calico-node-vvfpw
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: calico-node
      uid: 84377c2a-8082-43c9-8443-4eb55784c0f8
    resourceVersion: "1626970"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-node-vvfpw
    uid: 1f274672-c580-44e5-95fc-f90cac59c5ef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-master
    containers:
    - env:
      - name: DATASTORE_TYPE
        value: kubernetes
      - name: WAIT_FOR_DATASTORE
        value: "true"
      - name: CLUSTER_TYPE
        value: k8s,operator,bgp
      - name: CALICO_DISABLE_FILE_LOGGING
        value: "true"
      - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
        value: ACCEPT
      - name: FELIX_HEALTHENABLED
        value: "true"
      - name: NODENAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: FELIX_TYPHAK8SNAMESPACE
        value: calico-system
      - name: FELIX_TYPHAK8SSERVICENAME
        value: calico-typha
      - name: FELIX_TYPHACAFILE
        value: /typha-ca/caBundle
      - name: FELIX_TYPHACERTFILE
        value: /felix-certs/cert.crt
      - name: FELIX_TYPHAKEYFILE
        value: /felix-certs/key.key
      - name: FELIX_TYPHACN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: typha-certs
            optional: true
      - name: FELIX_TYPHAURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: typha-certs
            optional: true
      - name: CALICO_IPV4POOL_CIDR
        value: 10.244.0.0/16
      - name: CALICO_IPV4POOL_VXLAN
        value: CrossSubnet
      - name: CALICO_IPV4POOL_BLOCK_SIZE
        value: "26"
      - name: CALICO_IPV4POOL_NODE_SELECTOR
        value: all()
      - name: FELIX_VXLANMTU
        value: "1410"
      - name: FELIX_WIREGUARDMTU
        value: "1400"
      - name: CALICO_NETWORKING_BACKEND
        value: bird
      - name: FELIX_IPINIPMTU
        value: "1440"
      - name: IP
        value: autodetect
      - name: IP_AUTODETECTION_METHOD
        value: first-found
      - name: IP6
        value: none
      - name: FELIX_IPV6SUPPORT
        value: "false"
      - name: FELIX_IPTABLESBACKEND
        value: auto
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/node:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9099
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-node
      readinessProbe:
        exec:
          command:
          - /bin/calico-node
          - -bird-ready
          - -felix-ready
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/calico
        name: var-run-calico
      - mountPath: /var/lib/calico
        name: var-lib-calico
      - mountPath: /var/run/nodeagent
        name: policysync
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /felix-certs
        name: felix-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - image: docker.io/calico/pod2daemon-flexvol:v3.16.1
      imagePullPolicy: IfNotPresent
      name: flexvol-driver
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/driver
        name: flexvol-driver-host
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    - command:
      - /opt/cni/bin/install
      env:
      - name: CNI_CONF_NAME
        value: 10-calico.conflist
      - name: SLEEP
        value: "false"
      - name: CNI_NET_DIR
        value: /etc/cni/net.d
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: config
            name: cni-config
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/cni:v3.16.1
      imagePullPolicy: IfNotPresent
      name: install-cni
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-node-token-7nf6x
        readOnly: true
    nodeName: k8s-master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-node
    serviceAccountName: calico-node
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - hostPath:
        path: /var/run/calico
        type: ""
      name: var-run-calico
    - hostPath:
        path: /var/lib/calico
        type: ""
      name: var-lib-calico
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /var/run/nodeagent
        type: DirectoryOrCreate
      name: policysync
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: felix-certs
      secret:
        defaultMode: 420
        secretName: node-certs
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
        type: DirectoryOrCreate
      name: flexvol-driver-host
    - name: calico-node-token-7nf6x
      secret:
        defaultMode: 420
        secretName: calico-node-token-7nf6x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-24T12:38:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://653f76b88185601bd92bc25a5ee7e842fb6dec58cbf433dc535caba608c9c32f
      image: calico/node:v3.16.1
      imageID: docker-pullable://calico/node@sha256:93334c1d45b8263d39b2a9b557c9bc3ca10d3199c3e7bdd757bb86a5e422ebf7
      lastState:
        terminated:
          containerID: docker://8ac9e9e4c3ffcd6259b6b1c081ca02fcd66d4a43ebdccd4b08ef6e28deaedfd6
          exitCode: 0
          finishedAt: "2020-11-01T23:53:11Z"
          reason: Completed
          startedAt: "2020-11-01T23:16:09Z"
      name: calico-node
      ready: true
      restartCount: 9
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:23Z"
    hostIP: 192.168.56.201
    initContainerStatuses:
    - containerID: docker://12c3b6fd22bde4a178d84dbf1cb93de30a9d794b0b56d1e9f99c970e4db5cfb0
      image: calico/pod2daemon-flexvol:v3.16.1
      imageID: docker-pullable://calico/pod2daemon-flexvol@sha256:8239d918748625ce308acbb3f1b0782499b114a9a3b72fd2cf5bc0a27cc5d18a
      lastState: {}
      name: flexvol-driver
      ready: true
      restartCount: 2
      state:
        terminated:
          containerID: docker://12c3b6fd22bde4a178d84dbf1cb93de30a9d794b0b56d1e9f99c970e4db5cfb0
          exitCode: 0
          finishedAt: "2020-11-02T12:01:12Z"
          reason: Completed
          startedAt: "2020-11-02T12:01:11Z"
    - containerID: docker://7010f7d7d156b12cd1225492ad1469f6feb8bad789b31ab9ca3ccc31ca516944
      image: calico/cni:v3.16.1
      imageID: docker-pullable://calico/cni@sha256:3bae6028807375b22bf3b75f9db0e5d80b678a217f85bd1ea965889cee6e70aa
      lastState: {}
      name: install-cni
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://7010f7d7d156b12cd1225492ad1469f6feb8bad789b31ab9ca3ccc31ca516944
          exitCode: 0
          finishedAt: "2020-11-02T12:01:19Z"
          reason: Completed
          startedAt: "2020-11-02T12:01:14Z"
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: BestEffort
    startTime: "2020-10-24T12:38:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
      hash.operator.tigera.io/typha-cert: c2747cbf38d0f5dd839a7b284eaa9a6f05898806
    creationTimestamp: "2020-11-02T12:03:18Z"
    generateName: calico-typha-566756f49b-
    labels:
      k8s-app: calico-typha
      pod-template-hash: 566756f49b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/typha-ca: {}
            f:hash.operator.tigera.io/typha-cert: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84d1ae01-096e-499a-9af0-d7851b4dea96"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"calico-typha"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CLIENTCN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CLIENTURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CONNECTIONREBALANCINGMODE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_DATASTORETYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_K8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGFILEPATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSYS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERCERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5473,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/typha-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"typha-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:03:18Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.203"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:03:27Z"
    name: calico-typha-566756f49b-8z2s7
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-typha-566756f49b
      uid: 84d1ae01-096e-499a-9af0-d7851b4dea96
    resourceVersion: "1627263"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-typha-566756f49b-8z2s7
    uid: 27ebb886-2d9a-418e-8f82-1d7fe2128ba9
  spec:
    containers:
    - env:
      - name: TYPHA_LOGSEVERITYSCREEN
        value: info
      - name: TYPHA_LOGFILEPATH
        value: none
      - name: TYPHA_LOGSEVERITYSYS
        value: none
      - name: TYPHA_CONNECTIONREBALANCINGMODE
        value: kubernetes
      - name: TYPHA_DATASTORETYPE
        value: kubernetes
      - name: TYPHA_HEALTHENABLED
        value: "true"
      - name: TYPHA_K8SNAMESPACE
        value: calico-system
      - name: TYPHA_CAFILE
        value: /typha-ca/caBundle
      - name: TYPHA_SERVERCERTFILE
        value: /typha-certs/cert.crt
      - name: TYPHA_SERVERKEYFILE
        value: /typha-certs/key.key
      - name: TYPHA_CLIENTCN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: node-certs
            optional: true
      - name: TYPHA_CLIENTURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: node-certs
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/typha:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-typha
      ports:
      - containerPort: 5473
        hostPort: 5473
        name: calico-typha
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /typha-certs
        name: typha-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-typha-token-v9kzx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-typha
    serviceAccountName: calico-typha
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: typha-certs
      secret:
        defaultMode: 420
        secretName: typha-certs
    - name: calico-typha-token-v9kzx
      secret:
        defaultMode: 420
        secretName: calico-typha-token-v9kzx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:03:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:03:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:03:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:03:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://9eda2c6a97a82b37d5826657da723469cc1ec977880795136d901e9955b5f89c
      image: calico/typha:v3.16.1
      imageID: docker-pullable://calico/typha@sha256:c7f60d4139a6507b618b1d44d0690a601db376950b62210a9fefe7a567894fdf
      lastState: {}
      name: calico-typha
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:03:20Z"
    hostIP: 192.168.56.203
    phase: Running
    podIP: 192.168.56.203
    podIPs:
    - ip: 192.168.56.203
    qosClass: BestEffort
    startTime: "2020-11-02T12:03:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
      hash.operator.tigera.io/typha-cert: c2747cbf38d0f5dd839a7b284eaa9a6f05898806
    creationTimestamp: "2020-11-01T23:40:47Z"
    generateName: calico-typha-566756f49b-
    labels:
      k8s-app: calico-typha
      pod-template-hash: 566756f49b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/typha-ca: {}
            f:hash.operator.tigera.io/typha-cert: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84d1ae01-096e-499a-9af0-d7851b4dea96"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"calico-typha"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CLIENTCN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CLIENTURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CONNECTIONREBALANCINGMODE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_DATASTORETYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_K8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGFILEPATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSYS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERCERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5473,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/typha-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"typha-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.202"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:00:58Z"
    name: calico-typha-566756f49b-m6fsh
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-typha-566756f49b
      uid: 84d1ae01-096e-499a-9af0-d7851b4dea96
    resourceVersion: "1626387"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-typha-566756f49b-m6fsh
    uid: 282d8d7a-4950-4b7b-9dfb-b1dd790ff106
  spec:
    containers:
    - env:
      - name: TYPHA_LOGSEVERITYSCREEN
        value: info
      - name: TYPHA_LOGFILEPATH
        value: none
      - name: TYPHA_LOGSEVERITYSYS
        value: none
      - name: TYPHA_CONNECTIONREBALANCINGMODE
        value: kubernetes
      - name: TYPHA_DATASTORETYPE
        value: kubernetes
      - name: TYPHA_HEALTHENABLED
        value: "true"
      - name: TYPHA_K8SNAMESPACE
        value: calico-system
      - name: TYPHA_CAFILE
        value: /typha-ca/caBundle
      - name: TYPHA_SERVERCERTFILE
        value: /typha-certs/cert.crt
      - name: TYPHA_SERVERKEYFILE
        value: /typha-certs/key.key
      - name: TYPHA_CLIENTCN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: node-certs
            optional: true
      - name: TYPHA_CLIENTURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: node-certs
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/typha:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-typha
      ports:
      - containerPort: 5473
        hostPort: 5473
        name: calico-typha
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /typha-certs
        name: typha-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-typha-token-v9kzx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-typha
    serviceAccountName: calico-typha
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: typha-certs
      secret:
        defaultMode: 420
        secretName: typha-certs
    - name: calico-typha-token-v9kzx
      secret:
        defaultMode: 420
        secretName: calico-typha-token-v9kzx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://be22dbda97f2f7aefa04e8bc47a7a3689814f8637820a0ae25fea65007930963
      image: calico/typha:v3.16.1
      imageID: docker-pullable://calico/typha@sha256:c7f60d4139a6507b618b1d44d0690a601db376950b62210a9fefe7a567894fdf
      lastState:
        terminated:
          containerID: docker://bf2d0ab96f22e160b1ab21612dbfdc904d55c32583461d1cfc44b2f9985b6a64
          exitCode: 255
          finishedAt: "2020-11-02T12:00:06Z"
          reason: Error
          startedAt: "2020-11-01T23:41:03Z"
      name: calico-typha
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:51Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 192.168.56.202
    podIPs:
    - ip: 192.168.56.202
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
      hash.operator.tigera.io/typha-cert: c2747cbf38d0f5dd839a7b284eaa9a6f05898806
    creationTimestamp: "2020-11-01T23:29:37Z"
    generateName: calico-typha-566756f49b-
    labels:
      k8s-app: calico-typha
      pod-template-hash: 566756f49b
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:hash.operator.tigera.io/typha-ca: {}
            f:hash.operator.tigera.io/typha-cert: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"84d1ae01-096e-499a-9af0-d7851b4dea96"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"calico-typha"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"KUBERNETES_SERVICE_HOST"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KUBERNETES_SERVICE_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CAFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_CLIENTCN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CLIENTURISAN"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef:
                      .: {}
                      f:key: {}
                      f:name: {}
                      f:optional: {}
                k:{"name":"TYPHA_CONNECTIONREBALANCINGMODE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_DATASTORETYPE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_HEALTHENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_K8SNAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGFILEPATH"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSCREEN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_LOGSEVERITYSYS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERCERTFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TYPHA_SERVERKEYFILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":5473,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/typha-ca"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/typha-certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"typha-ca"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"typha-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:20Z"
    name: calico-typha-566756f49b-x96lr
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: calico-typha-566756f49b
      uid: 84d1ae01-096e-499a-9af0-d7851b4dea96
    resourceVersion: "1626597"
    selfLink: /api/v1/namespaces/calico-system/pods/calico-typha-566756f49b-x96lr
    uid: a4d81219-1746-4e78-b2be-c207d9d05b2b
  spec:
    containers:
    - env:
      - name: TYPHA_LOGSEVERITYSCREEN
        value: info
      - name: TYPHA_LOGFILEPATH
        value: none
      - name: TYPHA_LOGSEVERITYSYS
        value: none
      - name: TYPHA_CONNECTIONREBALANCINGMODE
        value: kubernetes
      - name: TYPHA_DATASTORETYPE
        value: kubernetes
      - name: TYPHA_HEALTHENABLED
        value: "true"
      - name: TYPHA_K8SNAMESPACE
        value: calico-system
      - name: TYPHA_CAFILE
        value: /typha-ca/caBundle
      - name: TYPHA_SERVERCERTFILE
        value: /typha-certs/cert.crt
      - name: TYPHA_SERVERKEYFILE
        value: /typha-certs/key.key
      - name: TYPHA_CLIENTCN
        valueFrom:
          secretKeyRef:
            key: common-name
            name: node-certs
            optional: true
      - name: TYPHA_CLIENTURISAN
        valueFrom:
          secretKeyRef:
            key: uri-san
            name: node-certs
            optional: true
      - name: KUBERNETES_SERVICE_HOST
        value: 10.96.0.1
      - name: KUBERNETES_SERVICE_PORT
        value: "443"
      image: docker.io/calico/typha:v3.16.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /liveness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: calico-typha
      ports:
      - containerPort: 5473
        hostPort: 5473
        name: calico-typha
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /readiness
          port: 9098
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /typha-ca
        name: typha-ca
        readOnly: true
      - mountPath: /typha-certs
        name: typha-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: calico-typha-token-v9kzx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 1000000000
    priorityClassName: calico-priority
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: calico-typha
    serviceAccountName: calico-typha
    terminationGracePeriodSeconds: 0
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: typha-ca
      name: typha-ca
    - name: typha-certs
      secret:
        defaultMode: 420
        secretName: typha-certs
    - name: calico-typha-token-v9kzx
      secret:
        defaultMode: 420
        secretName: calico-typha-token-v9kzx
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://597b49b97d1ce1f66d1d09f75e91b4340f9ac1e8d1600cc53c4f0557c09cb93f
      image: calico/typha:v3.16.1
      imageID: docker-pullable://calico/typha@sha256:c7f60d4139a6507b618b1d44d0690a601db376950b62210a9fefe7a567894fdf
      lastState:
        terminated:
          containerID: docker://dbab22ee7263671a5fcf61faae3ccc30ee88d9255f415248159d1ca66d4c24a7
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:29:48Z"
      name: calico-typha
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:06Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: BestEffort
    startTime: "2020-11-01T23:29:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.71/32
      cni.projectcalico.org/podIPs: 10.244.194.71/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: balance-api-app-75469d95c5-
    labels:
      app: balance-api-app
      pod-template-hash: 75469d95c5
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"44821034-e818-46f4-8d5d-2e42a17d2219"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"balance-api-container"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:45Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:27Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.71"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:34Z"
    name: balance-api-app-75469d95c5-s2hw7
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: balance-api-app-75469d95c5
      uid: 44821034-e818-46f4-8d5d-2e42a17d2219
    resourceVersion: "1626837"
    selfLink: /api/v1/namespaces/default/pods/balance-api-app-75469d95c5-s2hw7
    uid: d51abfc3-0d08-4331-bb11-ebbef3a98e6c
  spec:
    containers:
    - envFrom:
      - configMapRef:
          name: balance-api-properties
      image: swarmgs/balance
      imagePullPolicy: Always
      name: balance-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b813e71ae31f4c47bb3df3ae239fdee0aaa51d037e20c0f29118c7dfee4320ef
      image: swarmgs/balance:latest
      imageID: docker-pullable://swarmgs/balance@sha256:d87f02d2f6464eabe6b0b9db2d34c5329846249b990db652ce047f00b3ea64e6
      lastState:
        terminated:
          containerID: docker://728e14a5310623c4af5cd339ba8fbb48b2ef777233a16649444dbe7453785a11
          exitCode: 0
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Completed
          startedAt: "2020-11-01T23:41:28Z"
      name: balance-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:32Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.71
    podIPs:
    - ip: 10.244.194.71
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.111/32
      cni.projectcalico.org/podIPs: 10.244.194.111/32
    creationTimestamp: "2020-11-01T23:40:48Z"
    generateName: balance-api-app-75469d95c5-
    labels:
      app: balance-api-app
      pod-template-hash: 75469d95c5
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"44821034-e818-46f4-8d5d-2e42a17d2219"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"balance-api-container"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:30Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.111"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:40Z"
    name: balance-api-app-75469d95c5-s5g42
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: balance-api-app-75469d95c5
      uid: 44821034-e818-46f4-8d5d-2e42a17d2219
    resourceVersion: "1626900"
    selfLink: /api/v1/namespaces/default/pods/balance-api-app-75469d95c5-s5g42
    uid: 3ca400e2-0d33-411d-ad6d-d13ec45e945f
  spec:
    containers:
    - envFrom:
      - configMapRef:
          name: balance-api-properties
      image: swarmgs/balance
      imagePullPolicy: Always
      name: balance-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:49Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://51334cb62288680e2ab9d78f4a41462a2fc95577b0a57a7f44c79e41739ec6aa
      image: swarmgs/balance:latest
      imageID: docker-pullable://swarmgs/balance@sha256:d87f02d2f6464eabe6b0b9db2d34c5329846249b990db652ce047f00b3ea64e6
      lastState:
        terminated:
          containerID: docker://54e4a3448239836f635957c01a5b43fea9ea2c76a2b4d428be00877ccefdaac6
          exitCode: 0
          finishedAt: "2020-11-01T23:53:10Z"
          reason: Completed
          startedAt: "2020-11-01T23:41:26Z"
      name: balance-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:37Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.111
    podIPs:
    - ip: 10.244.194.111
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:49Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.235.216/32
      cni.projectcalico.org/podIPs: 10.244.235.216/32
    creationTimestamp: "2020-11-01T23:29:37Z"
    generateName: balance-api-app-75469d95c5-
    labels:
      app: balance-api-app
      pod-template-hash: 75469d95c5
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"44821034-e818-46f4-8d5d-2e42a17d2219"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"balance-api-container"}:
              .: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:29Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.235.216"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:43Z"
    name: balance-api-app-75469d95c5-vbk7r
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: balance-api-app-75469d95c5
      uid: 44821034-e818-46f4-8d5d-2e42a17d2219
    resourceVersion: "1626923"
    selfLink: /api/v1/namespaces/default/pods/balance-api-app-75469d95c5-vbk7r
    uid: c0c9a2b9-391c-4d09-ae47-9a0c5407ee19
  spec:
    containers:
    - envFrom:
      - configMapRef:
          name: balance-api-properties
      image: swarmgs/balance
      imagePullPolicy: Always
      name: balance-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://fe87c2009b55a7cbbcc731f9db850394879f4305a622d8917645d549bb9e3823
      image: swarmgs/balance:latest
      imageID: docker-pullable://swarmgs/balance@sha256:d87f02d2f6464eabe6b0b9db2d34c5329846249b990db652ce047f00b3ea64e6
      lastState:
        terminated:
          containerID: docker://2fcc3b602024185a45a271db28f9bb94287232e2adaa197cfd9c49f4156c78b0
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:29:54Z"
      name: balance-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:39Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 10.244.235.216
    podIPs:
    - ip: 10.244.235.216
    qosClass: BestEffort
    startTime: "2020-11-01T23:29:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.235.215/32
      cni.projectcalico.org/podIPs: 10.244.235.215/32
    creationTimestamp: "2020-11-01T23:29:37Z"
    generateName: customer-api-app-6548487b5c-
    labels:
      app: customer-api-app
      pod-template-hash: 6548487b5c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7919adac-f528-4a81-bca5-167491a8977b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"customer-api-container"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:36Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.235.215"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:44Z"
    name: customer-api-app-6548487b5c-9gbnc
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: customer-api-app-6548487b5c
      uid: 7919adac-f528-4a81-bca5-167491a8977b
    resourceVersion: "1626942"
    selfLink: /api/v1/namespaces/default/pods/customer-api-app-6548487b5c-9gbnc
    uid: 2f1e6bf5-76f9-4bbc-ba4e-302596bcf652
  spec:
    containers:
    - image: swarmgs/customer
      imagePullPolicy: Always
      name: customer-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4c2648c88863b0a305fb234726a10022ced92788423a0ac25cd18b10e60c3f8c
      image: swarmgs/customer:latest
      imageID: docker-pullable://swarmgs/customer@sha256:843f01ea4889d33e8832332b8c436e8af3d795255b54a8c6543ba4dde9cbd607
      lastState:
        terminated:
          containerID: docker://facc2fb12d8477e9e28daa5f60f11be18dc9002e2d533a48a12d304c2f568d5b
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:29:57Z"
      name: customer-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:41Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 10.244.235.215
    podIPs:
    - ip: 10.244.235.215
    qosClass: BestEffort
    startTime: "2020-11-01T23:29:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.126/32
      cni.projectcalico.org/podIPs: 10.244.194.126/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: customer-api-app-6548487b5c-
    labels:
      app: customer-api-app
      pod-template-hash: 6548487b5c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7919adac-f528-4a81-bca5-167491a8977b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"customer-api-container"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:45Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.126"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:28Z"
    name: customer-api-app-6548487b5c-r96v7
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: customer-api-app-6548487b5c
      uid: 7919adac-f528-4a81-bca5-167491a8977b
    resourceVersion: "1626725"
    selfLink: /api/v1/namespaces/default/pods/customer-api-app-6548487b5c-r96v7
    uid: 381d6675-73fa-464e-8314-88c9d9763471
  spec:
    containers:
    - image: swarmgs/customer
      imagePullPolicy: Always
      name: customer-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://013392506a1dead3b9afaee740760cd3e596346ae3e56670443cc23f7ad8354e
      image: swarmgs/customer:latest
      imageID: docker-pullable://swarmgs/customer@sha256:843f01ea4889d33e8832332b8c436e8af3d795255b54a8c6543ba4dde9cbd607
      lastState: {}
      name: customer-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:22Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.126
    podIPs:
    - ip: 10.244.194.126
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.127/32
      cni.projectcalico.org/podIPs: 10.244.194.127/32
    creationTimestamp: "2020-11-01T23:40:47Z"
    generateName: customer-api-app-6548487b5c-
    labels:
      app: customer-api-app
      pod-template-hash: 6548487b5c
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7919adac-f528-4a81-bca5-167491a8977b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"customer-api-container"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:28Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.127"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:38Z"
    name: customer-api-app-6548487b5c-w9l7n
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: customer-api-app-6548487b5c
      uid: 7919adac-f528-4a81-bca5-167491a8977b
    resourceVersion: "1626871"
    selfLink: /api/v1/namespaces/default/pods/customer-api-app-6548487b5c-w9l7n
    uid: cc7fc381-a078-400b-977f-4da49faae81c
  spec:
    containers:
    - image: swarmgs/customer
      imagePullPolicy: Always
      name: customer-api-container
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://915dac1d84f1351d8629bade91169affd21af270f692d2e6decd4536426d3ed1
      image: swarmgs/customer:latest
      imageID: docker-pullable://swarmgs/customer@sha256:843f01ea4889d33e8832332b8c436e8af3d795255b54a8c6543ba4dde9cbd607
      lastState:
        terminated:
          containerID: docker://086a96c769ed2f506d4c97d6e7c88205c5e35bcf8165f58939a03e46156417b8
          exitCode: 0
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Completed
          startedAt: "2020-11-01T23:41:23Z"
      name: customer-api-container
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:36Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.127
    podIPs:
    - ip: 10.244.194.127
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.117/32
      cni.projectcalico.org/podIPs: 10.244.194.117/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: tudemo-5667f4989f-
    labels:
      app: tudemo
      pod-template-hash: 5667f4989f
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"222003cf-8b4f-4294-8dad-93a135a16207"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"tu-demo"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:45Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:30Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.117"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:38Z"
    name: tudemo-5667f4989f-bc6h5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tudemo-5667f4989f
      uid: 222003cf-8b4f-4294-8dad-93a135a16207
    resourceVersion: "1626877"
    selfLink: /api/v1/namespaces/default/pods/tudemo-5667f4989f-bc6h5
    uid: 114b654b-f043-43f0-9fe7-87bba7181487
  spec:
    containers:
    - image: nigelpoulton/tu-demo:v2
      imagePullPolicy: IfNotPresent
      name: tu-demo
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://810570f902b3d8753f16f11fab461601ff398b9ba389e0d9c44449889860e4c1
      image: nigelpoulton/tu-demo:v2
      imageID: docker-pullable://nigelpoulton/tu-demo@sha256:c9f8e1882275d9ccd82e9e067c965d1406e8e1307333020a07915d6cbb9a74cf
      lastState:
        terminated:
          containerID: docker://9f3c3728804ec2925f0688345bcc17ee84d71ac91be27f8835b71b04be49810b
          exitCode: 0
          finishedAt: "2020-11-01T23:53:10Z"
          reason: Completed
          startedAt: "2020-11-01T23:41:09Z"
      name: tu-demo
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:34Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.117
    podIPs:
    - ip: 10.244.194.117
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.103/32
      cni.projectcalico.org/podIPs: 10.244.194.103/32
    creationTimestamp: "2020-11-01T23:40:47Z"
    generateName: tudemo-5667f4989f-
    labels:
      app: tudemo
      pod-template-hash: 5667f4989f
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"222003cf-8b4f-4294-8dad-93a135a16207"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"tu-demo"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:04Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.103"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:24Z"
    name: tudemo-5667f4989f-d622w
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tudemo-5667f4989f
      uid: 222003cf-8b4f-4294-8dad-93a135a16207
    resourceVersion: "1626685"
    selfLink: /api/v1/namespaces/default/pods/tudemo-5667f4989f-d622w
    uid: b430eead-798a-4a22-957f-5d8881a82282
  spec:
    containers:
    - image: nigelpoulton/tu-demo:v2
      imagePullPolicy: IfNotPresent
      name: tu-demo
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://057084fb4c35f0d7ee96b526bb7ff8a95bd82b2432273005c65366136f13d395
      image: nigelpoulton/tu-demo:v2
      imageID: docker-pullable://nigelpoulton/tu-demo@sha256:c9f8e1882275d9ccd82e9e067c965d1406e8e1307333020a07915d6cbb9a74cf
      lastState:
        terminated:
          containerID: docker://08497044333ed367d3062bb524d626b73b53f74cb9444817003e2fdd684c46e5
          exitCode: 255
          finishedAt: "2020-11-02T12:00:06Z"
          reason: Error
          startedAt: "2020-11-01T23:41:04Z"
      name: tu-demo
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:14Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.103
    podIPs:
    - ip: 10.244.194.103
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.235.204/32
      cni.projectcalico.org/podIPs: 10.244.235.204/32
    creationTimestamp: "2020-11-01T23:29:38Z"
    generateName: tudemo-5667f4989f-
    labels:
      app: tudemo
      pod-template-hash: 5667f4989f
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"222003cf-8b4f-4294-8dad-93a135a16207"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"tu-demo"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:38Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:36Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.235.204"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:44Z"
    name: tudemo-5667f4989f-lmwvn
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tudemo-5667f4989f
      uid: 222003cf-8b4f-4294-8dad-93a135a16207
    resourceVersion: "1626934"
    selfLink: /api/v1/namespaces/default/pods/tudemo-5667f4989f-lmwvn
    uid: b1ed7102-3c8f-48d3-acc8-241bc7daaff3
  spec:
    containers:
    - image: nigelpoulton/tu-demo:v2
      imagePullPolicy: IfNotPresent
      name: tu-demo
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g4z68
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g4z68
      secret:
        defaultMode: 420
        secretName: default-token-g4z68
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://a09c2d93df90850c1814693d254864e1f875f1e43013b1ac40fabed9ede11778
      image: nigelpoulton/tu-demo:v2
      imageID: docker-pullable://nigelpoulton/tu-demo@sha256:c9f8e1882275d9ccd82e9e067c965d1406e8e1307333020a07915d6cbb9a74cf
      lastState:
        terminated:
          containerID: docker://68666785a84829d5e3ebdb69d074e5208af759ee18902aa473cb32f68d925539
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:29:54Z"
      name: tu-demo
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:41Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 10.244.235.204
    podIPs:
    - ip: 10.244.235.204
    qosClass: BestEffort
    startTime: "2020-11-01T23:29:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.116/32
      cni.projectcalico.org/podIPs: 10.244.194.116/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: coredns-f9fd979d6-
    labels:
      k8s-app: kube-dns
      pod-template-hash: f9fd979d6
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"10cde76c-6457-413b-a7b7-c37a192b5598"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:33Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.116"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:43Z"
    name: coredns-f9fd979d6-88mjr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-f9fd979d6
      uid: 10cde76c-6457-413b-a7b7-c37a192b5598
    resourceVersion: "1626929"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-f9fd979d6-88mjr
    uid: 006fb0bb-68a5-4fc5-89bc-ff4eda44df5f
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.7.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-55hzr
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-55hzr
      secret:
        defaultMode: 420
        secretName: coredns-token-55hzr
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3b0732bd2f81e07fd74bbe9ff138563dafd09121c649ab950785ba1fc308834b
      image: k8s.gcr.io/coredns:1.7.0
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c
      lastState:
        terminated:
          containerID: docker://a1c57b7ff3d9e2d4e991da3cdea82cbba3aebd412879fe57470988556dec901f
          exitCode: 0
          finishedAt: "2020-11-01T23:53:14Z"
          reason: Completed
          startedAt: "2020-11-01T23:41:10Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:36Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.116
    podIPs:
    - ip: 10.244.194.116
    qosClass: Burstable
    startTime: "2020-11-01T23:40:48Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.235.222/32
      cni.projectcalico.org/podIPs: 10.244.235.222/32
    creationTimestamp: "2020-11-01T23:29:37Z"
    generateName: coredns-f9fd979d6-
    labels:
      k8s-app: kube-dns
      pod-template-hash: f9fd979d6
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"10cde76c-6457-413b-a7b7-c37a192b5598"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:37Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:42Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.235.222"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:55Z"
    name: coredns-f9fd979d6-svdbk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-f9fd979d6
      uid: 10cde76c-6457-413b-a7b7-c37a192b5598
    resourceVersion: "1626996"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-f9fd979d6-svdbk
    uid: db77d7e1-f543-4fdc-9bb1-b078710a09f9
  spec:
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: k8s.gcr.io/coredns:1.7.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-55hzr
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: k8s-master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-55hzr
      secret:
        defaultMode: 420
        secretName: coredns-token-55hzr
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://cbe1741caab80412e615133fe66272c24ad72ea1db04c6869dd59f024d08ee37
      image: k8s.gcr.io/coredns:1.7.0
      imageID: docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c
      lastState:
        terminated:
          containerID: docker://af9d8312c4eb5c6fed437d80e624dd880a736b4c8139dcd04364b93a960c7c3b
          exitCode: 0
          finishedAt: "2020-11-01T23:53:14Z"
          reason: Completed
          startedAt: "2020-11-01T23:29:51Z"
      name: coredns
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:45Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 10.244.235.222
    podIPs:
    - ip: 10.244.235.222
    qosClass: Burstable
    startTime: "2020-11-01T23:29:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://192.168.56.201:2379
      kubernetes.io/config.hash: ed7140ccdec4a2836d6d7f82b0a1e8ae
      kubernetes.io/config.mirror: ed7140ccdec4a2836d6d7f82b0a1e8ae
      kubernetes.io/config.seen: "2020-10-02T11:11:03.929537810Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-10-02T11:11:05Z"
    labels:
      component: etcd
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/etcd.advertise-client-urls: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"02785cf1-a993-48cb-9ae0-d45bda3a3b58"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"etcd"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/pki/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/etcd"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"etcd-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etcd-data"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:00Z"
    name: etcd-k8s-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: k8s-master
      uid: 02785cf1-a993-48cb-9ae0-d45bda3a3b58
    resourceVersion: "1626420"
    selfLink: /api/v1/namespaces/kube-system/pods/etcd-k8s-master
    uid: d126b185-86c1-4e76-88d4-60377317afd6
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://192.168.56.201:2379
      - --cert-file=/etc/kubernetes/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --initial-advertise-peer-urls=https://192.168.56.201:2380
      - --initial-cluster=k8s-master=https://192.168.56.201:2380
      - --key-file=/etc/kubernetes/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://192.168.56.201:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://192.168.56.201:2380
      - --name=k8s-master
      - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key
      - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      image: k8s.gcr.io/etcd:3.4.13-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources: {}
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /etc/kubernetes/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://862fea486ce0f450111f6726283dac6e89da3f1e9473965da679a28fc52e7f26
      image: k8s.gcr.io/etcd:3.4.13-0
      imageID: docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2
      lastState:
        terminated:
          containerID: docker://4ff8f4e5b3f3927c9f2362bb768d68d7c8f1b16ea3d7e84bec35a97e45446bee
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:15:38Z"
      name: etcd
      ready: true
      restartCount: 14
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:13Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: BestEffort
    startTime: "2020-11-02T12:00:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 192.168.56.201:6443
      kubernetes.io/config.hash: 350aa65829c74de3a21a41f4e0f4422d
      kubernetes.io/config.mirror: 350aa65829c74de3a21a41f4e0f4422d
      kubernetes.io/config.seen: "2020-11-01T23:22:09.482138614Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-11-01T23:22:23Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"02785cf1-a993-48cb-9ae0-d45bda3a3b58"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-apiserver"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:04Z"
    name: kube-apiserver-k8s-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: k8s-master
      uid: 02785cf1-a993-48cb-9ae0-d45bda3a3b58
    resourceVersion: "1626482"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-apiserver-k8s-master
    uid: d31807b3-b1be-4c12-8edc-816c6b59dc2a
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=192.168.56.201
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
      - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --insecure-port=0
      - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
      - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --secure-port=6443
      - --service-account-key-file=/etc/kubernetes/pki/sa.pub
      - --service-cluster-ip-range=10.96.0.0/12
      - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
      - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      image: k8s.gcr.io/kube-apiserver:v1.19.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 192.168.56.201
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 192.168.56.201
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 192.168.56.201
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:15:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:15:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f72abea775863da76f023048e4fda58ff4888007c13ac1135915ae4ba244b2b7
      image: k8s.gcr.io/kube-apiserver:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-apiserver@sha256:6ea8c40355df6c6c47050448e1f88cb4a5d618e9e96717818d4e11fcfe156ee0
      lastState:
        terminated:
          containerID: docker://28dcd05b6447d35da223c76d2a9d3e35c3c73998ff58c41dd5352e833bc4942c
          exitCode: 137
          finishedAt: "2020-11-01T23:53:21Z"
          reason: Error
          startedAt: "2020-11-01T23:22:11Z"
      name: kube-apiserver
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:13Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: Burstable
    startTime: "2020-11-01T23:15:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 929bd0d134ed517e06910955791c4170
      kubernetes.io/config.mirror: 929bd0d134ed517e06910955791c4170
      kubernetes.io/config.seen: "2020-11-01T23:22:26.003087270Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-11-01T23:22:26Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"02785cf1-a993-48cb-9ae0-d45bda3a3b58"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-controller-manager"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/controller-manager.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/kubernetes/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/pki"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/etc/ssl/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/libexec/kubernetes/kubelet-plugins/volume/exec"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/usr/local/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/usr/share/ca-certificates"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"ca-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"etc-pki"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"flexvolume-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"k8s-certs"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-local-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"usr-share-ca-certificates"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:05Z"
    name: kube-controller-manager-k8s-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: k8s-master
      uid: 02785cf1-a993-48cb-9ae0-d45bda3a3b58
    resourceVersion: "1626502"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-controller-manager-k8s-master
    uid: c05e081f-a96c-46fe-b0c3-f46f18a59738
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cluster-cidr=10.244.0.0/16
      - --cluster-name=kubernetes
      - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
      - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --node-cidr-mask-size=24
      - --port=0
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --root-ca-file=/etc/kubernetes/pki/ca.crt
      - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/12
      - --use-service-account-credentials=true
      image: k8s.gcr.io/kube-controller-manager:v1.19.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/pki
        name: etc-pki
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/pki
        type: DirectoryOrCreate
      name: etc-pki
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b611a9c0905f4d41f9886a7c3f94b0c74e34d9ce24b6c7ae71917e89697717ec
      image: k8s.gcr.io/kube-controller-manager:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:1ad35b623b9123c6aab99306ba5427e2829b36b378b9b80a6e988713ac5bffd4
      lastState:
        terminated:
          containerID: docker://65128d01e3e699e2d79b6ea14a76870cdd4d055498a6b415b35db9d99ddb5e46
          exitCode: 2
          finishedAt: "2020-11-01T23:53:11Z"
          reason: Error
          startedAt: "2020-11-01T23:22:28Z"
      name: kube-controller-manager
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:13Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: Burstable
    startTime: "2020-11-02T12:00:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-01T23:23:02Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 8f4659f59
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2d9e8e8c-e150-4851-a8bd-b4ecbe69281d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:23:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.203"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:00:44Z"
    name: kube-proxy-2ndrh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 2d9e8e8c-e150-4851-a8bd-b4ecbe69281d
    resourceVersion: "1626220"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-2ndrh
    uid: 25edb862-5a44-43dd-9049-88afb18168ea
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker2
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-qd97h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-qd97h
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-qd97h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://6ef0073dcb1842a0b0b71019b6b474da27fd735bd2e00cfbed5e9351d70a408f
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://59b084fb63075e2a646e6c6bff307893d885c9de8cc9c23d0c4a21b63ce836c5
          exitCode: 2
          finishedAt: "2020-11-01T23:53:10Z"
          reason: Error
          startedAt: "2020-11-01T23:46:27Z"
      name: kube-proxy
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:48Z"
    hostIP: 192.168.56.203
    phase: Running
    podIP: 192.168.56.203
    podIPs:
    - ip: 192.168.56.203
    qosClass: BestEffort
    startTime: "2020-11-01T23:23:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-01T23:23:42Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 8f4659f59
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2d9e8e8c-e150-4851-a8bd-b4ecbe69281d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:23:42Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:14Z"
    name: kube-proxy-9gtl8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 2d9e8e8c-e150-4851-a8bd-b4ecbe69281d
    resourceVersion: "1626561"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-9gtl8
    uid: 76a704d1-fde8-46da-a0df-b4563b576744
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-master
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-qd97h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-qd97h
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-qd97h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://78d0cc87f5c40d0eaa0786e940c61b96c9810178099cbb53772d921f42f7acc4
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://3c1dc4771c8ff0fa09965f228096d313a84a4bd2e94af87d9ef8f9fb555ff869
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:23:43Z"
      name: kube-proxy
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:06Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: BestEffort
    startTime: "2020-11-01T23:23:42Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-01T23:23:18Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 8f4659f59
      k8s-app: kube-proxy
      pod-template-generation: "2"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"2d9e8e8c-e150-4851-a8bd-b4ecbe69281d"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kube-proxy"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:34:35Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.202"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:00:51Z"
    name: kube-proxy-b9x5p
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 2d9e8e8c-e150-4851-a8bd-b4ecbe69281d
    resourceVersion: "1626309"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-b9x5p
    uid: 42897dd8-7137-4ec1-9924-2bb6fd587bd3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker1
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-qd97h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-proxy-token-qd97h
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-qd97h
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:23:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ee4afa8e7f07bf2c049bf916f24d41e305c01099a981f3e65b611751f6507e67
      image: k8s.gcr.io/kube-proxy:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-proxy@sha256:1f99b26aad3a90358ad83b4065cf59002b5a913e839b70744caff4a84315a2e7
      lastState:
        terminated:
          containerID: docker://71f080bfe20a3ac9261cc351d06a4a792f2806875d27cdd3cd49aa41cec711d6
          exitCode: 255
          finishedAt: "2020-11-02T12:00:06Z"
          reason: Error
          startedAt: "2020-11-01T23:35:15Z"
      name: kube-proxy
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:51Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 192.168.56.202
    podIPs:
    - ip: 192.168.56.202
    qosClass: BestEffort
    startTime: "2020-11-01T23:23:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: ee4c94eb845abf1878fb3c4c489b1365
      kubernetes.io/config.mirror: ee4c94eb845abf1878fb3c4c489b1365
      kubernetes.io/config.seen: "2020-11-01T23:22:30.296814965Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2020-11-01T23:22:30Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/config.hash: {}
            f:kubernetes.io/config.mirror: {}
            f:kubernetes.io/config.seen: {}
            f:kubernetes.io/config.source: {}
          f:labels:
            .: {}
            f:component: {}
            f:tier: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"02785cf1-a993-48cb-9ae0-d45bda3a3b58"}:
              .: {}
              f:apiVersion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kube-scheduler"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:startupProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:host: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/kubernetes/scheduler.conf"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeName: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
        f:status:
          f:conditions:
            .: {}
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:03Z"
    name: kube-scheduler-k8s-master
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: k8s-master
      uid: 02785cf1-a993-48cb-9ae0-d45bda3a3b58
    resourceVersion: "1626455"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-scheduler-k8s-master
    uid: 2ec1db25-f20e-4682-b623-b28f5a9f84a1
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      - --port=0
      image: k8s.gcr.io/kube-scheduler:v1.19.3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-10-30T18:34:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:27:09Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:27:09Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-30T18:34:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://db6c4eabae6d883dd763defac7a448c540974e3bdce7b6912b110cedb3465c99
      image: k8s.gcr.io/kube-scheduler:v1.19.3
      imageID: docker-pullable://k8s.gcr.io/kube-scheduler@sha256:54c61fbd9939006a8fe691e308d28636bffd8031af9d53a97214d6e2d27b8720
      lastState:
        terminated:
          containerID: docker://ce62c3c8b8a4e11e0e16c35a4eac8cec359c635e32b95d14c0e5f60db484919b
          exitCode: 2
          finishedAt: "2020-11-01T23:53:11Z"
          reason: Error
          startedAt: "2020-11-01T23:22:31Z"
      name: kube-scheduler
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:13Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: Burstable
    startTime: "2020-10-30T18:34:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.125/32
      cni.projectcalico.org/podIPs: 10.244.194.125/32
    creationTimestamp: "2020-11-01T23:40:46Z"
    generateName: metrics-server-68b849498d-
    labels:
      k8s-app: metrics-server
      pod-template-hash: 68b849498d
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1ac903fa-e01f-4723-849c-3f9b51625996"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"metrics-server"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":4443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-dir"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:45Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:07Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.125"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:23Z"
    name: metrics-server-68b849498d-hgwxn
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-68b849498d
      uid: 1ac903fa-e01f-4723-849c-3f9b51625996
    resourceVersion: "1626669"
    selfLink: /api/v1/namespaces/kube-system/pods/metrics-server-68b849498d-hgwxn
    uid: 79d3efb5-aaac-417d-9619-4ca68a72bbc0
  spec:
    containers:
    - args:
      - --cert-dir=/tmp
      - --secure-port=4443
      image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
      imagePullPolicy: IfNotPresent
      name: metrics-server
      ports:
      - containerPort: 4443
        name: main-port
        protocol: TCP
      resources: {}
      securityContext:
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: metrics-server-token-zmdsh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-dir
    - name: metrics-server-token-zmdsh
      secret:
        defaultMode: 420
        secretName: metrics-server-token-zmdsh
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:23Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:23Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://be277ac1535b22a164a994b2402335900ba5ccca6ebc77699350f7119bd1be8a
      image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
      imageID: docker-pullable://k8s.gcr.io/metrics-server/metrics-server@sha256:eec279de92328954ec69e9c2ef920861de28d31bb14b5290b53b5ef3dfa96502
      lastState:
        terminated:
          containerID: docker://5df3753010af3b8b2100e90432aa742cfbbcc68f3b932479ae95693c4a773be9
          exitCode: 2
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Error
          startedAt: "2020-11-01T23:41:00Z"
      name: metrics-server
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:17Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.125
    podIPs:
    - ip: 10.244.194.125
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.115/32
      cni.projectcalico.org/podIPs: 10.244.194.115/32
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2020-11-01T23:40:48Z"
    generateName: dashboard-metrics-scraper-7b59f7d4df-
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 7b59f7d4df
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:seccomp.security.alpha.kubernetes.io/pod: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"24fe1831-e7e9-41bf-897e-3de72bb1278b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"dashboard-metrics-scraper"}:
              .: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8000,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:32Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.115"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:39Z"
    name: dashboard-metrics-scraper-7b59f7d4df-wmnt5
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: dashboard-metrics-scraper-7b59f7d4df
      uid: 24fe1831-e7e9-41bf-897e-3de72bb1278b
    resourceVersion: "1626888"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/pods/dashboard-metrics-scraper-7b59f7d4df-wmnt5
    uid: 21447669-4c0f-423b-b91e-8e15380b3a15
  spec:
    containers:
    - image: kubernetesui/metrics-scraper:v1.0.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: dashboard-metrics-scraper
      ports:
      - containerPort: 8000
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-hwtnt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-hwtnt
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-hwtnt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://8e88c64a3cb7f25c68b7845492e9b7ccd2e5854775f1b61118bd12d18ae23b4d
      image: kubernetesui/metrics-scraper:v1.0.4
      imageID: docker-pullable://kubernetesui/metrics-scraper@sha256:555981a24f184420f3be0c79d4efb6c948a85cfce84034f85a563f4151a81cbf
      lastState:
        terminated:
          containerID: docker://cfc32867f9262a00d884726391fa03b362f9d3446f5084741515ed258a6dc2a6
          exitCode: 2
          finishedAt: "2020-11-01T23:53:10Z"
          reason: Error
          startedAt: "2020-11-01T23:41:18Z"
      name: dashboard-metrics-scraper
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:35Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.115
    podIPs:
    - ip: 10.244.194.115
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.235.221/32
      cni.projectcalico.org/podIPs: 10.244.235.221/32
    creationTimestamp: "2020-11-01T23:29:40Z"
    generateName: kubernetes-dashboard-74d688b6bc-
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 74d688b6bc
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"6badbda1-846a-4bd8-ab92-c50c6fba13e1"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"kubernetes-dashboard"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8443,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:readOnlyRootFilesystem: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/certs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"kubernetes-dashboard-certs"}:
              .: {}
              f:name: {}
              f:secret:
                .: {}
                f:defaultMode: {}
                f:secretName: {}
            k:{"name":"tmp-volume"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:29:40Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:46Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.235.221"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:53Z"
    name: kubernetes-dashboard-74d688b6bc-5jmv6
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-74d688b6bc
      uid: 6badbda1-846a-4bd8-ab92-c50c6fba13e1
    resourceVersion: "1626985"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/pods/kubernetes-dashboard-74d688b6bc-5jmv6
    uid: a3184dd8-f5f5-41f3-affe-07944563b5ac
  spec:
    containers:
    - args:
      - --auto-generate-certificates
      - --namespace=kubernetes-dashboard
      image: kubernetesui/dashboard:v2.0.0
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8443
          scheme: HTTPS
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard
      ports:
      - containerPort: 8443
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /certs
        name: kubernetes-dashboard-certs
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kubernetes-dashboard-token-hwtnt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-master
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard
    serviceAccountName: kubernetes-dashboard
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kubernetes-dashboard-certs
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-certs
    - emptyDir: {}
      name: tmp-volume
    - name: kubernetes-dashboard-token-hwtnt
      secret:
        defaultMode: 420
        secretName: kubernetes-dashboard-token-hwtnt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:29:40Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://dada22d73941137c313982b536c45a92a4de9c303b070ff20da6deefabb15c79
      image: kubernetesui/dashboard:v2.0.0
      imageID: docker-pullable://kubernetesui/dashboard@sha256:06868692fb9a7f2ede1a06de1b7b32afabc40ec739c1181d83b5ed3eb147ec6e
      lastState:
        terminated:
          containerID: docker://73b0308a4fd50be4f49981c92336c2398701974fe528354ba52fcb649cd81920
          exitCode: 2
          finishedAt: "2020-11-01T23:53:09Z"
          reason: Error
          startedAt: "2020-11-01T23:30:41Z"
      name: kubernetes-dashboard
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:51Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 10.244.235.221
    podIPs:
    - ip: 10.244.235.221
    qosClass: BestEffort
    startTime: "2020-11-01T23:29:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-11-01T23:40:48Z"
    generateName: tigera-operator-cdc4b6478-
    labels:
      k8s-app: tigera-operator
      name: tigera-operator
      pod-template-hash: cdc4b6478
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c01914ab-e66c-4026-8fd1-1c243823f7c0"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"tigera-operator"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"OPERATOR_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"TIGERA_OPERATOR_INIT_IMAGE_VERSION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"WATCH_NAMESPACE"}:
                  .: {}
                  f:name: {}
              f:envFrom: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:nodeSelector:
            .: {}
            f:kubernetes.io/os: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.202"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:28Z"
    name: tigera-operator-cdc4b6478-w225z
    namespace: tigera-operator
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: tigera-operator-cdc4b6478
      uid: c01914ab-e66c-4026-8fd1-1c243823f7c0
    resourceVersion: "1626737"
    selfLink: /api/v1/namespaces/tigera-operator/pods/tigera-operator-cdc4b6478-w225z
    uid: 8711ad6f-1d34-42bf-822d-1faaf01f2dd3
  spec:
    containers:
    - command:
      - operator
      env:
      - name: WATCH_NAMESPACE
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: OPERATOR_NAME
        value: tigera-operator
      - name: TIGERA_OPERATOR_INIT_IMAGE_VERSION
        value: v1.10.3
      envFrom:
      - configMapRef:
          name: kubernetes-services-endpoint
          optional: true
      image: quay.io/tigera/operator:v1.10.3
      imagePullPolicy: IfNotPresent
      name: tigera-operator
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: tigera-operator-token-d8cb7
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    nodeName: k8s-worker1
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: tigera-operator
    serviceAccountName: tigera-operator
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    - effect: NoSchedule
      operator: Exists
    volumes:
    - name: tigera-operator-token-d8cb7
      secret:
        defaultMode: 420
        secretName: tigera-operator-token-d8cb7
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:49Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ddb81f3a5fe1f51c36a11d332b249a02e6612083ae4e9cdba81d6245bcc03680
      image: quay.io/tigera/operator:v1.10.3
      imageID: docker-pullable://quay.io/tigera/operator@sha256:78a88635b510c5e37b12eaf70e5ed8893a8275e6bcc270e1ec39e21cfc1d66f6
      lastState:
        terminated:
          containerID: docker://fef462c99d8f91930e83ad3ac75ab03a94953cb0cf016db71b76995074dd9b82
          exitCode: 1
          finishedAt: "2020-11-02T12:00:53Z"
          reason: Error
          startedAt: "2020-11-02T12:00:51Z"
      name: tigera-operator
      ready: true
      restartCount: 2
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:12Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 192.168.56.202
    podIPs:
    - ip: 192.168.56.202
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-10-05T18:22:15Z"
    generateName: weave-scope-agent-
    labels:
      app: weave-scope
      controller-revision-hash: "6656565856"
      name: weave-scope-agent
      pod-template-generation: "1"
      weave-cloud-component: scope
      weave-scope-component: agent
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"da252101-c2f0-4c08-a477-4087cd395a23"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"scope-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/kernel/debug"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/docker.sock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/scope/plugins"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"docker-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"scope-plugins"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys-kernel-debug"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:34:35Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.202"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:00:50Z"
    name: weave-scope-agent-5w9zs
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-scope-agent
      uid: da252101-c2f0-4c08-a477-4087cd395a23
    resourceVersion: "1626298"
    selfLink: /api/v1/namespaces/weave/pods/weave-scope-agent-5w9zs
    uid: 3bec5e00-8562-4803-988c-a933f2adfcfe
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker1
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weave-scope-app.weave.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.1
      imagePullPolicy: IfNotPresent
      name: scope-agent
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g7jgs
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-g7jgs
      secret:
        defaultMode: 420
        secretName: default-token-g7jgs
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-10-05T18:22:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:52Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:52Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-05T18:22:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://313381005dd8992e222ddefc3c758fe82a7042cef64fd034da4b11b194210356
      image: weaveworks/scope:1.13.1
      imageID: docker-pullable://weaveworks/scope@sha256:4342f1c799aba244b975dcf12317eb11858f9879a3699818e2bf4c37887584dc
      lastState:
        terminated:
          containerID: docker://090b0f5ef42432f8cddfe572f26b1246b522b553982da344f014d68cd704d6a9
          exitCode: 0
          finishedAt: "2020-11-01T23:53:12Z"
          reason: Completed
          startedAt: "2020-11-01T23:35:04Z"
      name: scope-agent
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:51Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 192.168.56.202
    podIPs:
    - ip: 192.168.56.202
    qosClass: Burstable
    startTime: "2020-10-05T18:22:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-10-05T18:22:15Z"
    generateName: weave-scope-agent-
    labels:
      app: weave-scope
      controller-revision-hash: "6656565856"
      name: weave-scope-agent
      pod-template-generation: "1"
      weave-cloud-component: scope
      weave-scope-component: agent
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"da252101-c2f0-4c08-a477-4087cd395a23"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"scope-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/kernel/debug"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/docker.sock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/scope/plugins"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"docker-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"scope-plugins"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys-kernel-debug"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-10-08T21:24:24Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.203"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:00:44Z"
    name: weave-scope-agent-bwc42
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-scope-agent
      uid: da252101-c2f0-4c08-a477-4087cd395a23
    resourceVersion: "1626214"
    selfLink: /api/v1/namespaces/weave/pods/weave-scope-agent-bwc42
    uid: 62740a04-a2cb-4739-9202-8206e4e6de1a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-worker2
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weave-scope-app.weave.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.1
      imagePullPolicy: IfNotPresent
      name: scope-agent
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g7jgs
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: k8s-worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-g7jgs
      secret:
        defaultMode: 420
        secretName: default-token-g7jgs
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-10-05T18:22:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:00:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-05T18:22:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://30cb4a44538e0c4970564bc12e3824d796f2eec7a366e89900cbc179231054a7
      image: weaveworks/scope:1.13.1
      imageID: docker-pullable://weaveworks/scope@sha256:4342f1c799aba244b975dcf12317eb11858f9879a3699818e2bf4c37887584dc
      lastState:
        terminated:
          containerID: docker://0b36e47051dc64d4cbdf7b25395048f1af96e74ee4272b9598749a9f2c285700
          exitCode: 0
          finishedAt: "2020-11-01T23:53:10Z"
          reason: Completed
          startedAt: "2020-11-01T23:46:26Z"
      name: scope-agent
      ready: true
      restartCount: 12
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:00:48Z"
    hostIP: 192.168.56.203
    phase: Running
    podIP: 192.168.56.203
    podIPs:
    - ip: 192.168.56.203
    qosClass: Burstable
    startTime: "2020-10-05T18:22:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2020-10-24T12:38:02Z"
    generateName: weave-scope-agent-
    labels:
      app: weave-scope
      controller-revision-hash: "6656565856"
      name: weave-scope-agent
      pod-template-generation: "1"
      weave-cloud-component: scope
      weave-scope-component: agent
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:controller-revision-hash: {}
            f:name: {}
            f:pod-template-generation: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"da252101-c2f0-4c08-a477-4087cd395a23"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"scope-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/sys/kernel/debug"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/docker.sock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/scope/plugins"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:hostPID: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"docker-socket"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"scope-plugins"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"sys-kernel-debug"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-10-24T12:38:02Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.56.201"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:11Z"
    name: weave-scope-agent-p65hk
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: weave-scope-agent
      uid: da252101-c2f0-4c08-a477-4087cd395a23
    resourceVersion: "1626530"
    selfLink: /api/v1/namespaces/weave/pods/weave-scope-agent-p65hk
    uid: 84f093e5-525d-4549-b0e6-02beee236200
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - k8s-master
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=host
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - --probe.docker.bridge=docker0
      - --probe.docker=true
      - weave-scope-app.weave.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.1
      imagePullPolicy: IfNotPresent
      name: scope-agent
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: 100m
          memory: 100Mi
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/scope/plugins
        name: scope-plugins
      - mountPath: /sys/kernel/debug
        name: sys-kernel-debug
      - mountPath: /var/run/docker.sock
        name: docker-socket
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g7jgs
        readOnly: true
    dnsPolicy: ClusterFirstWithHostNet
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeName: k8s-master
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/run/scope/plugins
        type: ""
      name: scope-plugins
    - hostPath:
        path: /sys/kernel/debug
        type: ""
      name: sys-kernel-debug
    - hostPath:
        path: /var/run/docker.sock
        type: ""
      name: docker-socket
    - name: default-token-g7jgs
      secret:
        defaultMode: 420
        secretName: default-token-g7jgs
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-10-24T12:38:02Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:11Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:11Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-10-24T12:38:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://bb000caf2fecf5648fdecaf71999ebac545eef9a61edf3257bcc7968ffc682ac
      image: weaveworks/scope:1.13.1
      imageID: docker-pullable://weaveworks/scope@sha256:4342f1c799aba244b975dcf12317eb11858f9879a3699818e2bf4c37887584dc
      lastState:
        terminated:
          containerID: docker://00b5ae35ebcb9c6810c10a8b564cfcbdfaa766482323faa86157aa92891a6d93
          exitCode: 255
          finishedAt: "2020-11-02T11:59:57Z"
          reason: Error
          startedAt: "2020-11-01T23:16:03Z"
      name: scope-agent
      ready: true
      restartCount: 5
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:05Z"
    hostIP: 192.168.56.201
    phase: Running
    podIP: 192.168.56.201
    podIPs:
    - ip: 192.168.56.201
    qosClass: Burstable
    startTime: "2020-10-24T12:38:02Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.114/32
      cni.projectcalico.org/podIPs: 10.244.194.114/32
    creationTimestamp: "2020-11-01T23:40:48Z"
    generateName: weave-scope-app-545ddf96b4-
    labels:
      app: weave-scope
      name: weave-scope-app
      pod-template-hash: 545ddf96b4
      weave-cloud-component: scope
      weave-scope-component: app
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"251a333f-0b19-4044-bfa0-43b2a1be9acb"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"app"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":4040,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:48Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:17Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.114"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:27Z"
    name: weave-scope-app-545ddf96b4-zvzwr
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: weave-scope-app-545ddf96b4
      uid: 251a333f-0b19-4044-bfa0-43b2a1be9acb
    resourceVersion: "1626715"
    selfLink: /api/v1/namespaces/weave/pods/weave-scope-app-545ddf96b4-zvzwr
    uid: 5a57ac96-be30-4b89-86a8-8fba7f57e304
  spec:
    containers:
    - args:
      - --mode=app
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.1
      imagePullPolicy: IfNotPresent
      name: app
      ports:
      - containerPort: 4040
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: default-token-g7jgs
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: default-token-g7jgs
      secret:
        defaultMode: 420
        secretName: default-token-g7jgs
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://2982a57ea0a022015a7ed2e49d67f33c7530f507563d635d9dab3d8734dbce31
      image: weaveworks/scope:1.13.1
      imageID: docker-pullable://weaveworks/scope@sha256:4342f1c799aba244b975dcf12317eb11858f9879a3699818e2bf4c37887584dc
      lastState: {}
      name: app
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:24Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.114
    podIPs:
    - ip: 10.244.194.114
    qosClass: BestEffort
    startTime: "2020-11-01T23:40:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/podIP: 10.244.194.112/32
      cni.projectcalico.org/podIPs: 10.244.194.112/32
    creationTimestamp: "2020-11-01T23:40:47Z"
    generateName: weave-scope-cluster-agent-74c596c6b7-
    labels:
      app: weave-scope
      name: weave-scope-cluster-agent
      pod-template-hash: 74c596c6b7
      weave-cloud-component: scope
      weave-scope-component: cluster-agent
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"a0a2d1ef-4efe-43a9-8ad2-4e57e20bcf5b"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:containers:
            k:{"name":"scope-cluster-agent"}:
              .: {}
              f:args: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":4041,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:40:47Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cni.projectcalico.org/podIP: {}
            f:cni.projectcalico.org/podIPs: {}
      manager: calico
      operation: Update
      time: "2020-11-02T12:01:31Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.244.194.112"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2020-11-02T12:01:38Z"
    name: weave-scope-cluster-agent-74c596c6b7-dz9dh
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: weave-scope-cluster-agent-74c596c6b7
      uid: a0a2d1ef-4efe-43a9-8ad2-4e57e20bcf5b
    resourceVersion: "1626883"
    selfLink: /api/v1/namespaces/weave/pods/weave-scope-cluster-agent-74c596c6b7-dz9dh
    uid: 462c65a3-ec0c-4933-a32e-eaa90e25445d
  spec:
    containers:
    - args:
      - --mode=probe
      - --probe-only
      - --probe.kubernetes.role=cluster
      - --probe.http.listen=:4041
      - --probe.publish.interval=4500ms
      - --probe.spy.interval=2s
      - weave-scope-app.weave.svc.cluster.local:80
      command:
      - /home/weave/scope
      image: docker.io/weaveworks/scope:1.13.1
      imagePullPolicy: IfNotPresent
      name: scope-cluster-agent
      ports:
      - containerPort: 4041
        protocol: TCP
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: 25m
          memory: 80Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: weave-scope-token-x5d8x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: k8s-worker1
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: weave-scope
    serviceAccountName: weave-scope
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: weave-scope-token-x5d8x
      secret:
        defaultMode: 420
        secretName: weave-scope-token-x5d8x
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2020-11-02T12:01:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2020-11-01T23:40:48Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://3f53befba13983a114a353dfb9f0b1c20c9b39a383b5d6d1747da0a02c723e2d
      image: weaveworks/scope:1.13.1
      imageID: docker-pullable://weaveworks/scope@sha256:4342f1c799aba244b975dcf12317eb11858f9879a3699818e2bf4c37887584dc
      lastState:
        terminated:
          containerID: docker://15d817bb3e10dc793d9001b70e8a3781004b3c8c68e46c5165b40c1f765e826f
          exitCode: 255
          finishedAt: "2020-11-02T12:00:06Z"
          reason: Error
          startedAt: "2020-11-01T23:41:15Z"
      name: scope-cluster-agent
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2020-11-02T12:01:37Z"
    hostIP: 192.168.56.202
    phase: Running
    podIP: 10.244.194.112
    podIPs:
    - ip: 10.244.194.112
    qosClass: Burstable
    startTime: "2020-11-01T23:40:50Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-10-02T12:02:13Z"
    labels:
      k8s-app: calico-typha
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":5473,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: operator
      operation: Update
      time: "2020-10-02T12:02:13Z"
    name: calico-typha
    namespace: calico-system
    ownerReferences:
    - apiVersion: operator.tigera.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Installation
      name: default
      uid: fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89
    resourceVersion: "8094"
    selfLink: /api/v1/namespaces/calico-system/services/calico-typha
    uid: 06f5a91b-8340-454b-ab6b-fcf13715ad8b
  spec:
    clusterIP: 10.98.120.125
    ports:
    - name: calico-typha
      port: 5473
      protocol: TCP
      targetPort: calico-typha
    selector:
      k8s-app: calico-typha
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"balance-api-service"},"name":"balance-api-service","namespace":"default"},"spec":{"ports":[{"name":"80-3000","nodePort":30080,"port":80,"protocol":"TCP","targetPort":3000}],"selector":{"app":"balance-api-app"},"type":"NodePort"},"status":{"loadBalancer":{}}}
    creationTimestamp: "2020-10-29T23:22:32Z"
    labels:
      app: balance-api-service
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-29T23:22:31Z"
    name: balance-api-service
    namespace: default
    resourceVersion: "1545690"
    selfLink: /api/v1/namespaces/default/services/balance-api-service
    uid: 934aa12f-d3af-4edb-8fd2-c33467501000
  spec:
    clusterIP: 10.111.249.22
    externalTrafficPolicy: Cluster
    ports:
    - name: 80-3000
      nodePort: 30080
      port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app: balance-api-app
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"customer-api-service"},"name":"customer-api-service","namespace":"default"},"spec":{"ports":[{"name":"3000-3000","port":3000,"protocol":"TCP","targetPort":3000}],"selector":{"app":"customer-api-app"},"type":"ClusterIP"},"status":{"loadBalancer":{}}}
    creationTimestamp: "2020-10-29T23:22:31Z"
    labels:
      app: customer-api-service
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":3000,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-29T23:22:31Z"
    name: customer-api-service
    namespace: default
    resourceVersion: "1545670"
    selfLink: /api/v1/namespaces/default/services/customer-api-service
    uid: 69c87794-c6de-47e1-8419-894795e9c39c
  spec:
    clusterIP: 10.106.255.158
    ports:
    - name: 3000-3000
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: customer-api-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-10-02T11:10:59Z"
    labels:
      component: apiserver
      provider: kubernetes
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:component: {}
            f:provider: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kube-apiserver
      operation: Update
      time: "2020-10-02T11:10:59Z"
    name: kubernetes
    namespace: default
    resourceVersion: "155"
    selfLink: /api/v1/namespaces/default/services/kubernetes
    uid: 2aaa984d-d0b2-4dcf-98ca-5a5f577b0d45
  spec:
    clusterIP: 10.96.0.1
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"tudemo-service"},"name":"tudemo-service","namespace":"default"},"spec":{"ports":[{"name":"8080-80","nodePort":30020,"port":8080,"protocol":"TCP","targetPort":80}],"selector":{"app":"tudemo"},"type":"NodePort"},"status":{"loadBalancer":{}}}
    creationTimestamp: "2020-10-24T14:10:16Z"
    labels:
      app: tudemo-service
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:externalTrafficPolicy: {}
          f:ports:
            .: {}
            k:{"port":8080,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:nodePort: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-24T14:12:24Z"
    name: tudemo-service
    namespace: default
    resourceVersion: "1134312"
    selfLink: /api/v1/namespaces/default/services/tudemo-service
    uid: ea9ffba0-d4cf-419a-8c28-bf8a6f7977f4
  spec:
    clusterIP: 10.103.227.183
    externalTrafficPolicy: Cluster
    ports:
    - name: 8080-80
      nodePort: 30020
      port: 8080
      protocol: TCP
      targetPort: 80
    selector:
      app: tudemo
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2020-10-02T11:11:03Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: KubeDNS
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:prometheus.io/port: {}
            f:prometheus.io/scrape: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:clusterIP: {}
          f:ports:
            .: {}
            k:{"port":53,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":53,"protocol":"UDP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
            k:{"port":9153,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubeadm
      operation: Update
      time: "2020-10-02T11:11:03Z"
    name: kube-dns
    namespace: kube-system
    resourceVersion: "248"
    selfLink: /api/v1/namespaces/kube-system/services/kube-dns
    uid: 5ad24063-73f2-44a2-8fd8-997484768200
  spec:
    clusterIP: 10.96.0.10
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-10-05T21:11:19Z"
    labels:
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: Metrics-server
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:kubernetes.io/cluster-service: {}
            f:kubernetes.io/name: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T21:11:19Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "54332"
    selfLink: /api/v1/namespaces/kube-system/services/metrics-server
    uid: 91e4de7d-51b2-4ff2-9a98-29e3d3a31e5d
  spec:
    clusterIP: 10.103.190.136
    ports:
    - port: 443
      protocol: TCP
      targetPort: main-port
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-10-05T20:52:50Z"
    labels:
      k8s-app: dashboard-metrics-scraper
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":8000,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T20:52:50Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "51562"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/services/dashboard-metrics-scraper
    uid: 834b4fd6-c6ee-468d-8d34-1ad61579989b
  spec:
    clusterIP: 10.110.132.74
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      k8s-app: dashboard-metrics-scraper
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2020-10-05T20:52:50Z"
    labels:
      k8s-app: kubernetes-dashboard
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":443,"protocol":"TCP"}:
              .: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:k8s-app: {}
          f:sessionAffinity: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T20:52:50Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:externalTrafficPolicy: {}
          f:type: {}
      manager: kubectl-edit
      operation: Update
      time: "2020-10-05T21:01:09Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "52842"
    selfLink: /api/v1/namespaces/kubernetes-dashboard/services/kubernetes-dashboard
    uid: ea32e98e-ccef-4be2-b61e-7792fade4d4d
  spec:
    clusterIP: 10.111.11.142
    externalTrafficPolicy: Cluster
    ports:
    - nodePort: 31696
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      k8s-app: kubernetes-dashboard
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K\",\n    \"date\": \"Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"app":"weave-scope","name":"weave-scope-app","weave-cloud-component":"scope","weave-scope-component":"app"},"name":"weave-scope-app","namespace":"weave"},"spec":{"ports":[{"name":"app","port":80,"protocol":"TCP","targetPort":4040}],"selector":{"app":"weave-scope","name":"weave-scope-app","weave-cloud-component":"scope","weave-scope-component":"app"}}}
    creationTimestamp: "2020-10-05T18:22:15Z"
    labels:
      app: weave-scope
      name: weave-scope-app
      weave-cloud-component: scope
      weave-scope-component: app
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
        f:spec:
          f:ports:
            .: {}
            k:{"port":80,"protocol":"TCP"}:
              .: {}
              f:name: {}
              f:port: {}
              f:protocol: {}
              f:targetPort: {}
          f:selector:
            .: {}
            f:app: {}
            f:name: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:sessionAffinity: {}
          f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-05T18:22:15Z"
    name: weave-scope-app
    namespace: weave
    resourceVersion: "29160"
    selfLink: /api/v1/namespaces/weave/services/weave-scope-app
    uid: 9f666018-9694-4ba1-babb-ce6c26e1b7e7
  spec:
    clusterIP: 10.101.68.224
    ports:
    - name: app
      port: 80
      protocol: TCP
      targetPort: 4040
    selector:
      app: weave-scope
      name: weave-scope-app
      weave-cloud-component: scope
      weave-scope-component: app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2020-10-02T12:02:13Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:hash.operator.tigera.io/cni-config: {}
                f:hash.operator.tigera.io/node-cert: {}
                f:hash.operator.tigera.io/typha-ca: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"calico-node"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"CALICO_DISABLE_FILE_LOGGING"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CALICO_IPV4POOL_BLOCK_SIZE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CALICO_IPV4POOL_CIDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CALICO_IPV4POOL_NODE_SELECTOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CALICO_IPV4POOL_VXLAN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CALICO_NETWORKING_BACKEND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CLUSTER_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DATASTORE_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_HEALTHENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_IPINIPMTU"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_IPTABLESBACKEND"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_IPV6SUPPORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHACAFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHACERTFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHACN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"FELIX_TYPHAK8SNAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHAK8SSERVICENAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHAKEYFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_TYPHAURISAN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"FELIX_VXLANMTU"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"FELIX_WIREGUARDMTU"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"IP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"IP_AUTODETECTION_METHOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"IP6"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_SERVICE_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_SERVICE_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"NODENAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"WAIT_FOR_DATASTORE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/felix-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/typha-ca"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/var/lib/calico"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/calico"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/nodeagent"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:initContainers:
                .: {}
                k:{"name":"flexvol-driver"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/driver"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"install-cni"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"CNI_CONF_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CNI_NET_DIR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"CNI_NETWORK_CONFIG"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:configMapKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                    k:{"name":"KUBERNETES_SERVICE_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_SERVICE_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SLEEP"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/host/etc/cni/net.d"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/host/opt/cni/bin"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"cni-bin-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"cni-net-dir"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"felix-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"flexvol-driver-host"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"policysync"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"typha-ca"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"var-lib-calico"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"var-run-calico"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberReady: {}
      manager: operator
      operation: Update
      time: "2020-11-02T12:02:01Z"
    name: calico-node
    namespace: calico-system
    ownerReferences:
    - apiVersion: operator.tigera.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Installation
      name: default
      uid: fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89
    resourceVersion: "1627021"
    selfLink: /apis/apps/v1/namespaces/calico-system/daemonsets/calico-node
    uid: 84377c2a-8082-43c9-8443-4eb55784c0f8
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-node
    template:
      metadata:
        annotations:
          hash.operator.tigera.io/cni-config: 2f94c5fc72384ef436b5d9f2b30819fe245be55b
          hash.operator.tigera.io/node-cert: b0ca4917311ae3d76bb94af63e3d1152fd8d23de
          hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
        creationTimestamp: null
        labels:
          k8s-app: calico-node
      spec:
        containers:
        - env:
          - name: DATASTORE_TYPE
            value: kubernetes
          - name: WAIT_FOR_DATASTORE
            value: "true"
          - name: CLUSTER_TYPE
            value: k8s,operator,bgp
          - name: CALICO_DISABLE_FILE_LOGGING
            value: "true"
          - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
            value: ACCEPT
          - name: FELIX_HEALTHENABLED
            value: "true"
          - name: NODENAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: FELIX_TYPHAK8SNAMESPACE
            value: calico-system
          - name: FELIX_TYPHAK8SSERVICENAME
            value: calico-typha
          - name: FELIX_TYPHACAFILE
            value: /typha-ca/caBundle
          - name: FELIX_TYPHACERTFILE
            value: /felix-certs/cert.crt
          - name: FELIX_TYPHAKEYFILE
            value: /felix-certs/key.key
          - name: FELIX_TYPHACN
            valueFrom:
              secretKeyRef:
                key: common-name
                name: typha-certs
                optional: true
          - name: FELIX_TYPHAURISAN
            valueFrom:
              secretKeyRef:
                key: uri-san
                name: typha-certs
                optional: true
          - name: CALICO_IPV4POOL_CIDR
            value: 10.244.0.0/16
          - name: CALICO_IPV4POOL_VXLAN
            value: CrossSubnet
          - name: CALICO_IPV4POOL_BLOCK_SIZE
            value: "26"
          - name: CALICO_IPV4POOL_NODE_SELECTOR
            value: all()
          - name: FELIX_VXLANMTU
            value: "1410"
          - name: FELIX_WIREGUARDMTU
            value: "1400"
          - name: CALICO_NETWORKING_BACKEND
            value: bird
          - name: FELIX_IPINIPMTU
            value: "1440"
          - name: IP
            value: autodetect
          - name: IP_AUTODETECTION_METHOD
            value: first-found
          - name: IP6
            value: none
          - name: FELIX_IPV6SUPPORT
            value: "false"
          - name: FELIX_IPTABLESBACKEND
            value: auto
          - name: KUBERNETES_SERVICE_HOST
            value: 10.96.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "443"
          image: docker.io/calico/node:v3.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /liveness
              port: 9099
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: calico-node
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /var/run/calico
            name: var-run-calico
          - mountPath: /var/lib/calico
            name: var-lib-calico
          - mountPath: /var/run/nodeagent
            name: policysync
          - mountPath: /typha-ca
            name: typha-ca
            readOnly: true
          - mountPath: /felix-certs
            name: felix-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - image: docker.io/calico/pod2daemon-flexvol:v3.16.1
          imagePullPolicy: IfNotPresent
          name: flexvol-driver
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/driver
            name: flexvol-driver-host
        - command:
          - /opt/cni/bin/install
          env:
          - name: CNI_CONF_NAME
            value: 10-calico.conflist
          - name: SLEEP
            value: "false"
          - name: CNI_NET_DIR
            value: /etc/cni/net.d
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: config
                name: cni-config
          - name: KUBERNETES_SERVICE_HOST
            value: 10.96.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "443"
          image: docker.io/calico/cni:v3.16.1
          imagePullPolicy: IfNotPresent
          name: install-cni
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: calico-priority
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-node
        serviceAccountName: calico-node
        terminationGracePeriodSeconds: 0
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /var/run/calico
            type: ""
          name: var-run-calico
        - hostPath:
            path: /var/lib/calico
            type: ""
          name: var-lib-calico
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /var/run/nodeagent
            type: DirectoryOrCreate
          name: policysync
        - configMap:
            defaultMode: 420
            name: typha-ca
          name: typha-ca
        - name: felix-certs
          secret:
            defaultMode: 420
            secretName: node-certs
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds
            type: DirectoryOrCreate
          name: flexvol-driver-host
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2020-10-02T11:11:03Z"
    generation: 2
    labels:
      k8s-app: kube-proxy
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deprecated.daemonset.template.generation: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"NODE_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/lib/modules"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/run/xtables.lock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kube-proxy"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kube-proxy"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"lib-modules"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"xtables-lock"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
      manager: kubeadm
      operation: Update
      time: "2020-11-01T23:22:37Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:46:28Z"
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1625053"
    selfLink: /apis/apps/v1/namespaces/kube-system/daemonsets/kube-proxy
    uid: 2d9e8e8c-e150-4851-a8bd-b4ecbe69281d
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: k8s.gcr.io/kube-proxy:v1.19.3
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 2
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K\",\n    \"date\": \"Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"app":"weave-scope","name":"weave-scope-agent","weave-cloud-component":"scope","weave-scope-component":"agent"},"name":"weave-scope-agent","namespace":"weave"},"spec":{"minReadySeconds":5,"selector":{"matchLabels":{"app":"weave-scope","name":"weave-scope-agent","weave-cloud-component":"scope","weave-scope-component":"agent"}},"template":{"metadata":{"labels":{"app":"weave-scope","name":"weave-scope-agent","weave-cloud-component":"scope","weave-scope-component":"agent"}},"spec":{"containers":[{"args":["--mode=probe","--probe-only","--probe.kubernetes.role=host","--probe.publish.interval=4500ms","--probe.spy.interval=2s","--probe.docker.bridge=docker0","--probe.docker=true","weave-scope-app.weave.svc.cluster.local:80"],"command":["/home/weave/scope"],"env":[],"image":"docker.io/weaveworks/scope:1.13.1","imagePullPolicy":"IfNotPresent","name":"scope-agent","resources":{"limits":{"memory":"2000Mi"},"requests":{"cpu":"100m","memory":"100Mi"}},"securityContext":{"privileged":true},"volumeMounts":[{"mountPath":"/var/run/scope/plugins","name":"scope-plugins"},{"mountPath":"/sys/kernel/debug","name":"sys-kernel-debug"},{"mountPath":"/var/run/docker.sock","name":"docker-socket"}]}],"dnsPolicy":"ClusterFirstWithHostNet","hostNetwork":true,"hostPID":true,"tolerations":[{"effect":"NoSchedule","operator":"Exists"},{"effect":"NoExecute","operator":"Exists"}],"volumes":[{"hostPath":{"path":"/var/run/scope/plugins"},"name":"scope-plugins"},{"hostPath":{"path":"/sys/kernel/debug"},"name":"sys-kernel-debug"},{"hostPath":{"path":"/var/run/docker.sock"},"name":"docker-socket"}]}},"updateStrategy":{"type":"RollingUpdate"}}}
    creationTimestamp: "2020-10-05T18:22:15Z"
    generation: 1
    labels:
      app: weave-scope
      name: weave-scope-agent
      weave-cloud-component: scope
      weave-scope-component: agent
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:deprecated.daemonset.template.generation: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
        f:spec:
          f:minReadySeconds: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:weave-cloud-component: {}
              f:weave-scope-component: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:weave-cloud-component: {}
                f:weave-scope-component: {}
            f:spec:
              f:containers:
                k:{"name":"scope-agent"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:privileged: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/sys/kernel/debug"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/docker.sock"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/run/scope/plugins"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:hostPID: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"docker-socket"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"scope-plugins"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
                k:{"name":"sys-kernel-debug"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
          f:updateStrategy:
            f:rollingUpdate:
              .: {}
              f:maxUnavailable: {}
            f:type: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-05T18:22:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:currentNumberScheduled: {}
          f:desiredNumberScheduled: {}
          f:numberAvailable: {}
          f:numberReady: {}
          f:observedGeneration: {}
          f:updatedNumberScheduled: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-01T23:46:32Z"
    name: weave-scope-agent
    namespace: weave
    resourceVersion: "1625070"
    selfLink: /apis/apps/v1/namespaces/weave/daemonsets/weave-scope-agent
    uid: da252101-c2f0-4c08-a477-4087cd395a23
  spec:
    minReadySeconds: 5
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: weave-scope
        name: weave-scope-agent
        weave-cloud-component: scope
        weave-scope-component: agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: weave-scope
          name: weave-scope-agent
          weave-cloud-component: scope
          weave-scope-component: agent
      spec:
        containers:
        - args:
          - --mode=probe
          - --probe-only
          - --probe.kubernetes.role=host
          - --probe.publish.interval=4500ms
          - --probe.spy.interval=2s
          - --probe.docker.bridge=docker0
          - --probe.docker=true
          - weave-scope-app.weave.svc.cluster.local:80
          command:
          - /home/weave/scope
          image: docker.io/weaveworks/scope:1.13.1
          imagePullPolicy: IfNotPresent
          name: scope-agent
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: 100m
              memory: 100Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/scope/plugins
            name: scope-plugins
          - mountPath: /sys/kernel/debug
            name: sys-kernel-debug
          - mountPath: /var/run/docker.sock
            name: docker-socket
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        hostPID: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /var/run/scope/plugins
            type: ""
          name: scope-plugins
        - hostPath:
            path: /sys/kernel/debug
            type: ""
          name: sys-kernel-debug
        - hostPath:
            path: /var/run/docker.sock
            type: ""
          name: docker-socket
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 3
    desiredNumberScheduled: 3
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    observedGeneration: 1
    updatedNumberScheduled: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:14Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
              f:name: {}
              f:namespace: {}
            f:spec:
              f:containers:
                k:{"name":"calico-kube-controllers"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DATASTORE_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ENABLED_CONTROLLERS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
      manager: operator
      operation: Update
      time: "2020-10-02T12:02:14Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:42Z"
    name: calico-kube-controllers
    namespace: calico-system
    ownerReferences:
    - apiVersion: operator.tigera.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Installation
      name: default
      uid: fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89
    resourceVersion: "1626980"
    selfLink: /apis/apps/v1/namespaces/calico-system/deployments/calico-kube-controllers
    uid: ee487e30-ecf7-46cc-8374-c0f4842823be
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
        name: calico-kube-controllers
        namespace: calico-system
      spec:
        containers:
        - env:
          - name: DATASTORE_TYPE
            value: kubernetes
          - name: ENABLED_CONTROLLERS
            value: node
          image: docker.io/calico/kube-controllers:v3.16.1
          imagePullPolicy: IfNotPresent
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: calico-priority
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-02T12:02:14Z"
      lastUpdateTime: "2020-10-02T12:03:19Z"
      message: ReplicaSet "calico-kube-controllers-6ddfb4769" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:42Z"
      lastUpdateTime: "2020-11-02T12:01:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:13Z"
    generation: 6
    labels:
      k8s-app: calico-typha
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:hash.operator.tigera.io/typha-ca: {}
                f:hash.operator.tigera.io/typha-cert: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"calico-typha"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"KUBERNETES_SERVICE_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_SERVICE_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_CAFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_CLIENTCN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"TYPHA_CLIENTURISAN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"TYPHA_CONNECTIONREBALANCINGMODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_DATASTORETYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_HEALTHENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_K8SNAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGFILEPATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGSEVERITYSCREEN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGSEVERITYSYS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_SERVERCERTFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_SERVERKEYFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5473,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/typha-ca"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/typha-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"typha-ca"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"typha-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
      manager: operator
      operation: Update
      time: "2020-11-02T12:03:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:03:27Z"
    name: calico-typha
    namespace: calico-system
    ownerReferences:
    - apiVersion: operator.tigera.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Installation
      name: default
      uid: fcb99ed0-d3b9-4c4c-8aec-5d9afc852e89
    resourceVersion: "1627267"
    selfLink: /apis/apps/v1/namespaces/calico-system/deployments/calico-typha
    uid: 8a2430a5-08d6-4427-9bdf-7b4a3fffe18f
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        k8s-app: calico-typha
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
          hash.operator.tigera.io/typha-cert: c2747cbf38d0f5dd839a7b284eaa9a6f05898806
        creationTimestamp: null
        labels:
          k8s-app: calico-typha
      spec:
        containers:
        - env:
          - name: TYPHA_LOGSEVERITYSCREEN
            value: info
          - name: TYPHA_LOGFILEPATH
            value: none
          - name: TYPHA_LOGSEVERITYSYS
            value: none
          - name: TYPHA_CONNECTIONREBALANCINGMODE
            value: kubernetes
          - name: TYPHA_DATASTORETYPE
            value: kubernetes
          - name: TYPHA_HEALTHENABLED
            value: "true"
          - name: TYPHA_K8SNAMESPACE
            value: calico-system
          - name: TYPHA_CAFILE
            value: /typha-ca/caBundle
          - name: TYPHA_SERVERCERTFILE
            value: /typha-certs/cert.crt
          - name: TYPHA_SERVERKEYFILE
            value: /typha-certs/key.key
          - name: TYPHA_CLIENTCN
            valueFrom:
              secretKeyRef:
                key: common-name
                name: node-certs
                optional: true
          - name: TYPHA_CLIENTURISAN
            valueFrom:
              secretKeyRef:
                key: uri-san
                name: node-certs
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 10.96.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "443"
          image: docker.io/calico/typha:v3.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /liveness
              port: 9098
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: calico-typha
          ports:
          - containerPort: 5473
            hostPort: 5473
            name: calico-typha
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /readiness
              port: 9098
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /typha-ca
            name: typha-ca
            readOnly: true
          - mountPath: /typha-certs
            name: typha-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: calico-priority
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-typha
        serviceAccountName: calico-typha
        terminationGracePeriodSeconds: 0
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: typha-ca
          name: typha-ca
        - name: typha-certs
          secret:
            defaultMode: 420
            secretName: typha-certs
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2020-10-02T12:02:13Z"
      lastUpdateTime: "2020-10-02T12:02:23Z"
      message: ReplicaSet "calico-typha-566756f49b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-10-29T21:23:07Z"
      lastUpdateTime: "2020-10-29T21:23:07Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 6
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"balance-api-app"},"name":"balance-api-app","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"balance-api-app"}},"strategy":{},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"balance-api-app"}},"spec":{"containers":[{"envFrom":[{"configMapRef":{"name":"balance-api-properties"}}],"image":"swarmgs/balance","name":"balance-api-container","resources":{}}]}}},"status":{}}
    creationTimestamp: "2020-10-29T23:22:31Z"
    generation: 2
    labels:
      app: balance-api-app
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"balance-api-container"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-29T23:24:56Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:43Z"
    name: balance-api-app
    namespace: default
    resourceVersion: "1626930"
    selfLink: /apis/apps/v1/namespaces/default/deployments/balance-api-app
    uid: 67a61875-11ca-44cb-9075-a1f887786ba9
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: balance-api-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: balance-api-app
      spec:
        containers:
        - envFrom:
          - configMapRef:
              name: balance-api-properties
          image: swarmgs/balance
          imagePullPolicy: Always
          name: balance-api-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2020-10-29T23:22:31Z"
      lastUpdateTime: "2020-10-29T23:22:37Z"
      message: ReplicaSet "balance-api-app-75469d95c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:43Z"
      lastUpdateTime: "2020-11-02T12:01:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"customer-api-app"},"name":"customer-api-app","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"customer-api-app"}},"strategy":{},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"customer-api-app"}},"spec":{"containers":[{"image":"swarmgs/customer","name":"customer-api-container","resources":{}}]}}},"status":{}}
    creationTimestamp: "2020-10-29T23:22:31Z"
    generation: 2
    labels:
      app: customer-api-app
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"customer-api-container"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-29T23:24:56Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:45Z"
    name: customer-api-app
    namespace: default
    resourceVersion: "1626948"
    selfLink: /apis/apps/v1/namespaces/default/deployments/customer-api-app
    uid: dfd1a27e-e97b-4121-b58c-a7b9c850e3e9
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: customer-api-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: customer-api-app
      spec:
        containers:
        - image: swarmgs/customer
          imagePullPolicy: Always
          name: customer-api-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2020-10-29T23:22:31Z"
      lastUpdateTime: "2020-10-29T23:22:39Z"
      message: ReplicaSet "customer-api-app-6548487b5c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:45Z"
      lastUpdateTime: "2020-11-02T12:01:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "4"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"creationTimestamp":null,"labels":{"app":"tudemo"},"name":"tudemo","namespace":"default"},"spec":{"replicas":4,"selector":{"matchLabels":{"app":"tudemo"}},"strategy":{},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"tudemo"}},"spec":{"containers":[{"image":"nigelpoulton/tu-demo:v2","name":"tu-demo","resources":{}}]}}},"status":{}}
    creationTimestamp: "2020-10-24T14:07:10Z"
    generation: 8
    labels:
      app: tudemo
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"tu-demo"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-24T19:06:17Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:44Z"
    name: tudemo
    namespace: default
    resourceVersion: "1626939"
    selfLink: /apis/apps/v1/namespaces/default/deployments/tudemo
    uid: fed44842-ef49-45d1-8ca4-50423d5ee054
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: tudemo
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tudemo
      spec:
        containers:
        - image: nigelpoulton/tu-demo:v2
          imagePullPolicy: IfNotPresent
          name: tu-demo
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2020-10-24T14:07:10Z"
      lastUpdateTime: "2020-10-24T19:06:38Z"
      message: ReplicaSet "tudemo-5667f4989f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:44Z"
      lastUpdateTime: "2020-11-02T12:01:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 8
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T11:11:03Z"
    generation: 2
    labels:
      k8s-app: kube-dns
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
      manager: kubeadm
      operation: Update
      time: "2020-10-02T11:11:03Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            k:{"type":"Available"}:
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:55Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "1627000"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns
    uid: 5796dddb-df1d-47fb-bc86-33dc4586a6ab
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2020-10-02T12:03:10Z"
      lastUpdateTime: "2020-10-02T12:03:14Z"
      message: ReplicaSet "coredns-f9fd979d6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:44Z"
      lastUpdateTime: "2020-11-02T12:01:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T21:11:19Z"
    generation: 1
    labels:
      k8s-app: metrics-server
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-dir"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T21:11:19Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:23Z"
    name: metrics-server
    namespace: kube-system
    resourceVersion: "1626674"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/metrics-server
    uid: 3e34398f-b7e7-4637-8c7e-ead5e57a3327
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-05T21:11:19Z"
      lastUpdateTime: "2020-10-05T21:11:21Z"
      message: ReplicaSet "metrics-server-68b849498d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:23Z"
      lastUpdateTime: "2020-11-02T12:01:23Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T20:52:50Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T20:52:50Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:39Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "1626893"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/dashboard-metrics-scraper
    uid: 0426eda5-d7bb-4efd-ba07-70d42600ab4e
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-05T20:52:50Z"
      lastUpdateTime: "2020-10-05T20:52:53Z"
      message: ReplicaSet "dashboard-metrics-scraper-7b59f7d4df" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:39Z"
      lastUpdateTime: "2020-11-02T12:01:39Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T20:52:50Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubernetes-dashboard-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-05T20:52:50Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:53Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "1626989"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/kubernetes-dashboard
    uid: c78ab9d5-2c43-418b-9b4a-9065d2a749d4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kubernetes-dashboard
          image: kubernetesui/dashboard:v2.0.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-05T20:52:50Z"
      lastUpdateTime: "2020-10-05T20:52:56Z"
      message: ReplicaSet "kubernetes-dashboard-74d688b6bc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:53Z"
      lastUpdateTime: "2020-11-02T12:01:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:02Z"
    generation: 1
    labels:
      k8s-app: tigera-operator
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:name: {}
            f:spec:
              f:containers:
                k:{"name":"tigera-operator"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"OPERATOR_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"TIGERA_OPERATOR_INIT_IMAGE_VERSION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"WATCH_NAMESPACE"}:
                      .: {}
                      f:name: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
      manager: kubectl-create
      operation: Update
      time: "2020-10-02T12:02:02Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:29Z"
    name: tigera-operator
    namespace: tigera-operator
    resourceVersion: "1626744"
    selfLink: /apis/apps/v1/namespaces/tigera-operator/deployments/tigera-operator
    uid: 1bbb4de7-e678-4a64-8c57-2170e2dcba4f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        name: tigera-operator
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: tigera-operator
          name: tigera-operator
      spec:
        containers:
        - command:
          - operator
          env:
          - name: WATCH_NAMESPACE
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: tigera-operator
          - name: TIGERA_OPERATOR_INIT_IMAGE_VERSION
            value: v1.10.3
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: quay.io/tigera/operator:v1.10.3
          imagePullPolicy: IfNotPresent
          name: tigera-operator
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tigera-operator
        serviceAccountName: tigera-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-02T12:02:03Z"
      lastUpdateTime: "2020-10-02T12:02:04Z"
      message: ReplicaSet "tigera-operator-cdc4b6478" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:29Z"
      lastUpdateTime: "2020-11-02T12:01:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K\",\n    \"date\": \"Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"app":"weave-scope","name":"weave-scope-app","weave-cloud-component":"scope","weave-scope-component":"app"},"name":"weave-scope-app","namespace":"weave"},"spec":{"replicas":1,"revisionHistoryLimit":2,"selector":{"matchLabels":{"app":"weave-scope","name":"weave-scope-app","weave-cloud-component":"scope","weave-scope-component":"app"}},"template":{"metadata":{"labels":{"app":"weave-scope","name":"weave-scope-app","weave-cloud-component":"scope","weave-scope-component":"app"}},"spec":{"containers":[{"args":["--mode=app"],"command":["/home/weave/scope"],"env":[],"image":"docker.io/weaveworks/scope:1.13.1","imagePullPolicy":"IfNotPresent","name":"app","ports":[{"containerPort":4040,"protocol":"TCP"}]}]}}}}
    creationTimestamp: "2020-10-05T18:22:15Z"
    generation: 1
    labels:
      app: weave-scope
      name: weave-scope-app
      weave-cloud-component: scope
      weave-scope-component: app
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:weave-cloud-component: {}
              f:weave-scope-component: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:weave-cloud-component: {}
                f:weave-scope-component: {}
            f:spec:
              f:containers:
                k:{"name":"app"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4040,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-05T18:22:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:28Z"
    name: weave-scope-app
    namespace: weave
    resourceVersion: "1626721"
    selfLink: /apis/apps/v1/namespaces/weave/deployments/weave-scope-app
    uid: 1d7311bf-b1d7-41ee-a277-20f372cb9bcd
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: weave-scope
        name: weave-scope-app
        weave-cloud-component: scope
        weave-scope-component: app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: weave-scope
          name: weave-scope-app
          weave-cloud-component: scope
          weave-scope-component: app
      spec:
        containers:
        - args:
          - --mode=app
          command:
          - /home/weave/scope
          image: docker.io/weaveworks/scope:1.13.1
          imagePullPolicy: IfNotPresent
          name: app
          ports:
          - containerPort: 4040
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-05T18:22:15Z"
      lastUpdateTime: "2020-10-05T18:22:47Z"
      message: ReplicaSet "weave-scope-app-545ddf96b4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:28Z"
      lastUpdateTime: "2020-11-02T12:01:28Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{"cloud.weave.works/launcher-info":"{\n  \"original-request\": {\n    \"url\": \"/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K\",\n    \"date\": \"Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)\"\n  },\n  \"email-address\": \"support@weave.works\"\n}"},"labels":{"app":"weave-scope","name":"weave-scope-cluster-agent","weave-cloud-component":"scope","weave-scope-component":"cluster-agent"},"name":"weave-scope-cluster-agent","namespace":"weave"},"spec":{"replicas":1,"revisionHistoryLimit":2,"selector":{"matchLabels":{"app":"weave-scope","name":"weave-scope-cluster-agent","weave-cloud-component":"scope","weave-scope-component":"cluster-agent"}},"template":{"metadata":{"labels":{"app":"weave-scope","name":"weave-scope-cluster-agent","weave-cloud-component":"scope","weave-scope-component":"cluster-agent"}},"spec":{"containers":[{"args":["--mode=probe","--probe-only","--probe.kubernetes.role=cluster","--probe.http.listen=:4041","--probe.publish.interval=4500ms","--probe.spy.interval=2s","weave-scope-app.weave.svc.cluster.local:80"],"command":["/home/weave/scope"],"env":[],"image":"docker.io/weaveworks/scope:1.13.1","imagePullPolicy":"IfNotPresent","name":"scope-cluster-agent","ports":[{"containerPort":4041,"protocol":"TCP"}],"resources":{"limits":{"memory":"2000Mi"},"requests":{"cpu":"25m","memory":"80Mi"}}}],"serviceAccountName":"weave-scope"}}}}
    creationTimestamp: "2020-10-05T18:22:15Z"
    generation: 1
    labels:
      app: weave-scope
      name: weave-scope-cluster-agent
      weave-cloud-component: scope
      weave-scope-component: cluster-agent
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:weave-cloud-component: {}
              f:weave-scope-component: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:weave-cloud-component: {}
                f:weave-scope-component: {}
            f:spec:
              f:containers:
                k:{"name":"scope-cluster-agent"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4041,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2020-10-05T18:22:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:38Z"
    name: weave-scope-cluster-agent
    namespace: weave
    resourceVersion: "1626886"
    selfLink: /apis/apps/v1/namespaces/weave/deployments/weave-scope-cluster-agent
    uid: 5ef400d5-85d6-4c7d-97e5-370acc7ff7ee
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: weave-scope
        name: weave-scope-cluster-agent
        weave-cloud-component: scope
        weave-scope-component: cluster-agent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: weave-scope
          name: weave-scope-cluster-agent
          weave-cloud-component: scope
          weave-scope-component: cluster-agent
      spec:
        containers:
        - args:
          - --mode=probe
          - --probe-only
          - --probe.kubernetes.role=cluster
          - --probe.http.listen=:4041
          - --probe.publish.interval=4500ms
          - --probe.spy.interval=2s
          - weave-scope-app.weave.svc.cluster.local:80
          command:
          - /home/weave/scope
          image: docker.io/weaveworks/scope:1.13.1
          imagePullPolicy: IfNotPresent
          name: scope-cluster-agent
          ports:
          - containerPort: 4041
            protocol: TCP
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: 25m
              memory: 80Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: weave-scope
        serviceAccountName: weave-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2020-10-05T18:22:15Z"
      lastUpdateTime: "2020-10-05T18:22:49Z"
      message: ReplicaSet "weave-scope-cluster-agent-74c596c6b7" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2020-11-02T12:01:38Z"
      lastUpdateTime: "2020-11-02T12:01:38Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:14Z"
    generation: 1
    labels:
      k8s-app: calico-kube-controllers
      pod-template-hash: 6ddfb4769
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"ee487e30-ecf7-46cc-8374-c0f4842823be"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
              f:name: {}
              f:namespace: {}
            f:spec:
              f:containers:
                k:{"name":"calico-kube-controllers"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DATASTORE_TYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ENABLED_CONTROLLERS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:41Z"
    name: calico-kube-controllers-6ddfb4769
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: calico-kube-controllers
      uid: ee487e30-ecf7-46cc-8374-c0f4842823be
    resourceVersion: "1626911"
    selfLink: /apis/apps/v1/namespaces/calico-system/replicasets/calico-kube-controllers-6ddfb4769
    uid: 70819acc-8e60-425e-bb22-2071beb13026
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: calico-kube-controllers
        pod-template-hash: 6ddfb4769
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: calico-kube-controllers
          pod-template-hash: 6ddfb4769
        name: calico-kube-controllers
        namespace: calico-system
      spec:
        containers:
        - env:
          - name: DATASTORE_TYPE
            value: kubernetes
          - name: ENABLED_CONTROLLERS
            value: node
          image: docker.io/calico/kube-controllers:v3.16.1
          imagePullPolicy: IfNotPresent
          name: calico-kube-controllers
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: calico-priority
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-kube-controllers
        serviceAccountName: calico-kube-controllers
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:13Z"
    generation: 6
    labels:
      k8s-app: calico-typha
      pod-template-hash: 566756f49b
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"8a2430a5-08d6-4427-9bdf-7b4a3fffe18f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:hash.operator.tigera.io/typha-ca: {}
                f:hash.operator.tigera.io/typha-cert: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"calico-typha"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"KUBERNETES_SERVICE_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KUBERNETES_SERVICE_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_CAFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_CLIENTCN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"TYPHA_CLIENTURISAN"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                          f:optional: {}
                    k:{"name":"TYPHA_CONNECTIONREBALANCINGMODE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_DATASTORETYPE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_HEALTHENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_K8SNAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGFILEPATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGSEVERITYSCREEN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_LOGSEVERITYSYS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_SERVERCERTFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"TYPHA_SERVERKEYFILE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5473,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:host: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/typha-ca"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
                    k:{"mountPath":"/typha-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"typha-ca"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"typha-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:03:27Z"
    name: calico-typha-566756f49b
    namespace: calico-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: calico-typha
      uid: 8a2430a5-08d6-4427-9bdf-7b4a3fffe18f
    resourceVersion: "1627264"
    selfLink: /apis/apps/v1/namespaces/calico-system/replicasets/calico-typha-566756f49b
    uid: 84d1ae01-096e-499a-9af0-d7851b4dea96
  spec:
    replicas: 3
    selector:
      matchLabels:
        k8s-app: calico-typha
        pod-template-hash: 566756f49b
    template:
      metadata:
        annotations:
          hash.operator.tigera.io/typha-ca: 8d6c66be98edbf64065870a131f54a3b99a63804
          hash.operator.tigera.io/typha-cert: c2747cbf38d0f5dd839a7b284eaa9a6f05898806
        creationTimestamp: null
        labels:
          k8s-app: calico-typha
          pod-template-hash: 566756f49b
      spec:
        containers:
        - env:
          - name: TYPHA_LOGSEVERITYSCREEN
            value: info
          - name: TYPHA_LOGFILEPATH
            value: none
          - name: TYPHA_LOGSEVERITYSYS
            value: none
          - name: TYPHA_CONNECTIONREBALANCINGMODE
            value: kubernetes
          - name: TYPHA_DATASTORETYPE
            value: kubernetes
          - name: TYPHA_HEALTHENABLED
            value: "true"
          - name: TYPHA_K8SNAMESPACE
            value: calico-system
          - name: TYPHA_CAFILE
            value: /typha-ca/caBundle
          - name: TYPHA_SERVERCERTFILE
            value: /typha-certs/cert.crt
          - name: TYPHA_SERVERKEYFILE
            value: /typha-certs/key.key
          - name: TYPHA_CLIENTCN
            valueFrom:
              secretKeyRef:
                key: common-name
                name: node-certs
                optional: true
          - name: TYPHA_CLIENTURISAN
            valueFrom:
              secretKeyRef:
                key: uri-san
                name: node-certs
                optional: true
          - name: KUBERNETES_SERVICE_HOST
            value: 10.96.0.1
          - name: KUBERNETES_SERVICE_PORT
            value: "443"
          image: docker.io/calico/typha:v3.16.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /liveness
              port: 9098
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: calico-typha
          ports:
          - containerPort: 5473
            hostPort: 5473
            name: calico-typha
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /readiness
              port: 9098
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /typha-ca
            name: typha-ca
            readOnly: true
          - mountPath: /typha-certs
            name: typha-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: calico-priority
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: calico-typha
        serviceAccountName: calico-typha
        terminationGracePeriodSeconds: 0
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: typha-ca
          name: typha-ca
        - name: typha-certs
          secret:
            defaultMode: 420
            secretName: typha-certs
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 6
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-29T23:22:31Z"
    generation: 2
    labels:
      app: balance-api-app
      pod-template-hash: 75469d95c5
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"67a61875-11ca-44cb-9075-a1f887786ba9"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"balance-api-container"}:
                  .: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:43Z"
    name: balance-api-app-75469d95c5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: balance-api-app
      uid: 67a61875-11ca-44cb-9075-a1f887786ba9
    resourceVersion: "1626926"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/balance-api-app-75469d95c5
    uid: 44821034-e818-46f4-8d5d-2e42a17d2219
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: balance-api-app
        pod-template-hash: 75469d95c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: balance-api-app
          pod-template-hash: 75469d95c5
      spec:
        containers:
        - envFrom:
          - configMapRef:
              name: balance-api-properties
          image: swarmgs/balance
          imagePullPolicy: Always
          name: balance-api-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-29T23:22:31Z"
    generation: 2
    labels:
      app: customer-api-app
      pod-template-hash: 6548487b5c
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"dfd1a27e-e97b-4121-b58c-a7b9c850e3e9"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"customer-api-container"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:45Z"
    name: customer-api-app-6548487b5c
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: customer-api-app
      uid: dfd1a27e-e97b-4121-b58c-a7b9c850e3e9
    resourceVersion: "1626943"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/customer-api-app-6548487b5c
    uid: 7919adac-f528-4a81-bca5-167491a8977b
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: customer-api-app
        pod-template-hash: 6548487b5c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: customer-api-app
          pod-template-hash: 6548487b5c
      spec:
        containers:
        - image: swarmgs/customer
          imagePullPolicy: Always
          name: customer-api-container
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "4"
      deployment.kubernetes.io/max-replicas: "5"
      deployment.kubernetes.io/revision: "3"
      deployment.kubernetes.io/revision-history: "1"
    creationTimestamp: "2020-10-24T14:07:10Z"
    generation: 21
    labels:
      app: tudemo
      pod-template-hash: 554c6d7f66
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:deployment.kubernetes.io/revision-history: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fed44842-ef49-45d1-8ca4-50423d5ee054"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"tu-demo"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:observedGeneration: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-10-24T19:06:35Z"
    name: tudemo-554c6d7f66
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tudemo
      uid: fed44842-ef49-45d1-8ca4-50423d5ee054
    resourceVersion: "1178189"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/tudemo-554c6d7f66
    uid: c6b2cfef-6ddf-4cf4-aa7b-1fb068d6489b
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: tudemo
        pod-template-hash: 554c6d7f66
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tudemo
          pod-template-hash: 554c6d7f66
      spec:
        containers:
        - image: nigelpoulton/tu-demo:v1
          imagePullPolicy: IfNotPresent
          name: tu-demo
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 21
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "4"
      deployment.kubernetes.io/revision-history: "2"
    creationTimestamp: "2020-10-24T14:17:07Z"
    generation: 23
    labels:
      app: tudemo
      pod-template-hash: 5667f4989f
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
            f:deployment.kubernetes.io/revision-history: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"fed44842-ef49-45d1-8ca4-50423d5ee054"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"tu-demo"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:44Z"
    name: tudemo-5667f4989f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tudemo
      uid: fed44842-ef49-45d1-8ca4-50423d5ee054
    resourceVersion: "1626936"
    selfLink: /apis/apps/v1/namespaces/default/replicasets/tudemo-5667f4989f
    uid: 222003cf-8b4f-4294-8dad-93a135a16207
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: tudemo
        pod-template-hash: 5667f4989f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: tudemo
          pod-template-hash: 5667f4989f
      spec:
        containers:
        - image: nigelpoulton/tu-demo:v2
          imagePullPolicy: IfNotPresent
          name: tu-demo
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 23
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T11:11:18Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: f9fd979d6
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5796dddb-df1d-47fb-bc86-33dc4586a6ab"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:55Z"
    name: coredns-f9fd979d6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 5796dddb-df1d-47fb-bc86-33dc4586a6ab
    resourceVersion: "1626999"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/coredns-f9fd979d6
    uid: 10cde76c-6457-413b-a7b7-c37a192b5598
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: f9fd979d6
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: f9fd979d6
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T21:11:19Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: 68b849498d
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"3e34398f-b7e7-4637-8c7e-ead5e57a3327"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-dir"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:23Z"
    name: metrics-server-68b849498d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 3e34398f-b7e7-4637-8c7e-ead5e57a3327
    resourceVersion: "1626673"
    selfLink: /apis/apps/v1/namespaces/kube-system/replicasets/metrics-server-68b849498d
    uid: 1ac903fa-e01f-4723-849c-3f9b51625996
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: 68b849498d
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: 68b849498d
        name: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
          imagePullPolicy: IfNotPresent
          name: metrics-server
          ports:
          - containerPort: 4443
            name: main-port
            protocol: TCP
          resources: {}
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T20:52:50Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
      pod-template-hash: 7b59f7d4df
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"0426eda5-d7bb-4efd-ba07-70d42600ab4e"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:39Z"
    name: dashboard-metrics-scraper-7b59f7d4df
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: dashboard-metrics-scraper
      uid: 0426eda5-d7bb-4efd-ba07-70d42600ab4e
    resourceVersion: "1626889"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/replicasets/dashboard-metrics-scraper-7b59f7d4df
    uid: 24fe1831-e7e9-41bf-897e-3de72bb1278b
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
        pod-template-hash: 7b59f7d4df
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
          pod-template-hash: 7b59f7d4df
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T20:52:50Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
      pod-template-hash: 74d688b6bc
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c78ab9d5-2c43-418b-9b4a-9065d2a749d4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubernetes-dashboard-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:53Z"
    name: kubernetes-dashboard-74d688b6bc
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard
      uid: c78ab9d5-2c43-418b-9b4a-9065d2a749d4
    resourceVersion: "1626987"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/replicasets/kubernetes-dashboard-74d688b6bc
    uid: 6badbda1-846a-4bd8-ab92-c50c6fba13e1
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
        pod-template-hash: 74d688b6bc
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
          pod-template-hash: 74d688b6bc
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kubernetes-dashboard
          image: kubernetesui/dashboard:v2.0.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-02T12:02:03Z"
    generation: 1
    labels:
      k8s-app: tigera-operator
      name: tigera-operator
      pod-template-hash: cdc4b6478
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:k8s-app: {}
            f:name: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1bbb4de7-e678-4a64-8c57-2170e2dcba4f"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:name: {}
              f:pod-template-hash: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
                f:name: {}
                f:pod-template-hash: {}
            f:spec:
              f:containers:
                k:{"name":"tigera-operator"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"OPERATOR_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"TIGERA_OPERATOR_INIT_IMAGE_VERSION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"WATCH_NAMESPACE"}:
                      .: {}
                      f:name: {}
                  f:envFrom: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:29Z"
    name: tigera-operator-cdc4b6478
    namespace: tigera-operator
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: tigera-operator
      uid: 1bbb4de7-e678-4a64-8c57-2170e2dcba4f
    resourceVersion: "1626742"
    selfLink: /apis/apps/v1/namespaces/tigera-operator/replicasets/tigera-operator-cdc4b6478
    uid: c01914ab-e66c-4026-8fd1-1c243823f7c0
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: tigera-operator
        pod-template-hash: cdc4b6478
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: tigera-operator
          name: tigera-operator
          pod-template-hash: cdc4b6478
      spec:
        containers:
        - command:
          - operator
          env:
          - name: WATCH_NAMESPACE
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: tigera-operator
          - name: TIGERA_OPERATOR_INIT_IMAGE_VERSION
            value: v1.10.3
          envFrom:
          - configMapRef:
              name: kubernetes-services-endpoint
              optional: true
          image: quay.io/tigera/operator:v1.10.3
          imagePullPolicy: IfNotPresent
          name: tigera-operator
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirstWithHostNet
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: tigera-operator
        serviceAccountName: tigera-operator
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoExecute
          operator: Exists
        - effect: NoSchedule
          operator: Exists
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T18:22:15Z"
    generation: 1
    labels:
      app: weave-scope
      name: weave-scope-app
      pod-template-hash: 545ddf96b4
      weave-cloud-component: scope
      weave-scope-component: app
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1d7311bf-b1d7-41ee-a277-20f372cb9bcd"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:pod-template-hash: {}
              f:weave-cloud-component: {}
              f:weave-scope-component: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
                f:weave-cloud-component: {}
                f:weave-scope-component: {}
            f:spec:
              f:containers:
                k:{"name":"app"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4040,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:27Z"
    name: weave-scope-app-545ddf96b4
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: weave-scope-app
      uid: 1d7311bf-b1d7-41ee-a277-20f372cb9bcd
    resourceVersion: "1626720"
    selfLink: /apis/apps/v1/namespaces/weave/replicasets/weave-scope-app-545ddf96b4
    uid: 251a333f-0b19-4044-bfa0-43b2a1be9acb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: weave-scope
        name: weave-scope-app
        pod-template-hash: 545ddf96b4
        weave-cloud-component: scope
        weave-scope-component: app
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: weave-scope
          name: weave-scope-app
          pod-template-hash: 545ddf96b4
          weave-cloud-component: scope
          weave-scope-component: app
      spec:
        containers:
        - args:
          - --mode=app
          command:
          - /home/weave/scope
          image: docker.io/weaveworks/scope:1.13.1
          imagePullPolicy: IfNotPresent
          name: app
          ports:
          - containerPort: 4040
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      cloud.weave.works/launcher-info: |-
        {
          "original-request": {
            "url": "/k8s/v1.16/scope.yaml?k8s-version=Q2xpZW50IFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjQxOjAyWiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0KU2VydmVyIFZlcnNpb246IHZlcnNpb24uSW5mb3tNYWpvcjoiMSIsIE1pbm9yOiIxOSIsIEdpdFZlcnNpb246InYxLjE5LjIiLCBHaXRDb21taXQ6ImY1NzQzMDkzZmQxYzY2M2NiMGNiYzg5NzQ4ZjczMDY2MjM0NWQ0NGQiLCBHaXRUcmVlU3RhdGU6ImNsZWFuIiwgQnVpbGREYXRlOiIyMDIwLTA5LTE2VDEzOjMyOjU4WiIsIEdvVmVyc2lvbjoiZ28xLjE1IiwgQ29tcGlsZXI6ImdjIiwgUGxhdGZvcm06ImxpbnV4L2FtZDY0In0K",
            "date": "Mon Oct 05 2020 18:22:14 GMT+0000 (UTC)"
          },
          "email-address": "support@weave.works"
        }
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2020-10-05T18:22:15Z"
    generation: 1
    labels:
      app: weave-scope
      name: weave-scope-cluster-agent
      pod-template-hash: 74c596c6b7
      weave-cloud-component: scope
      weave-scope-component: cluster-agent
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:cloud.weave.works/launcher-info: {}
            f:deployment.kubernetes.io/desired-replicas: {}
            f:deployment.kubernetes.io/max-replicas: {}
            f:deployment.kubernetes.io/revision: {}
          f:labels:
            .: {}
            f:app: {}
            f:name: {}
            f:pod-template-hash: {}
            f:weave-cloud-component: {}
            f:weave-scope-component: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"5ef400d5-85d6-4c7d-97e5-370acc7ff7ee"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:replicas: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:name: {}
              f:pod-template-hash: {}
              f:weave-cloud-component: {}
              f:weave-scope-component: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:name: {}
                f:pod-template-hash: {}
                f:weave-cloud-component: {}
                f:weave-scope-component: {}
            f:spec:
              f:containers:
                k:{"name":"scope-cluster-agent"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":4041,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
        f:status:
          f:availableReplicas: {}
          f:fullyLabeledReplicas: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2020-11-02T12:01:38Z"
    name: weave-scope-cluster-agent-74c596c6b7
    namespace: weave
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: weave-scope-cluster-agent
      uid: 5ef400d5-85d6-4c7d-97e5-370acc7ff7ee
    resourceVersion: "1626885"
    selfLink: /apis/apps/v1/namespaces/weave/replicasets/weave-scope-cluster-agent-74c596c6b7
    uid: a0a2d1ef-4efe-43a9-8ad2-4e57e20bcf5b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: weave-scope
        name: weave-scope-cluster-agent
        pod-template-hash: 74c596c6b7
        weave-cloud-component: scope
        weave-scope-component: cluster-agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: weave-scope
          name: weave-scope-cluster-agent
          pod-template-hash: 74c596c6b7
          weave-cloud-component: scope
          weave-scope-component: cluster-agent
      spec:
        containers:
        - args:
          - --mode=probe
          - --probe-only
          - --probe.kubernetes.role=cluster
          - --probe.http.listen=:4041
          - --probe.publish.interval=4500ms
          - --probe.spy.interval=2s
          - weave-scope-app.weave.svc.cluster.local:80
          command:
          - /home/weave/scope
          image: docker.io/weaveworks/scope:1.13.1
          imagePullPolicy: IfNotPresent
          name: scope-cluster-agent
          ports:
          - containerPort: 4041
            protocol: TCP
          resources:
            limits:
              memory: 2000Mi
            requests:
              cpu: 25m
              memory: 80Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: weave-scope
        serviceAccountName: weave-scope
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
